
ProjectCalculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000013a2  00001416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000199f  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  00002f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd7  00000000  00000000  000038af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00004488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000589  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ef9  00000000  00000000  00004bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00005ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      54:	57 02       	muls	r21, r23
      56:	39 02       	muls	r19, r25
      58:	3b 02       	muls	r19, r27
      5a:	3d 02       	muls	r19, r29
      5c:	3f 02       	muls	r19, r31
      5e:	41 02       	muls	r20, r17
      60:	43 02       	muls	r20, r19
      62:	45 02       	muls	r20, r21
      64:	47 02       	muls	r20, r23
      66:	49 02       	muls	r20, r25
      68:	4b 02       	muls	r20, r27
      6a:	4d 02       	muls	r20, r29
      6c:	4f 02       	muls	r20, r31
      6e:	51 02       	muls	r21, r17
      70:	53 02       	muls	r21, r19
      72:	55 02       	muls	r21, r21

00000074 <__trampolines_end>:
      74:	00 40       	sbci	r16, 0x00	; 0
      76:	7a 10       	cpse	r7, r10
      78:	f3 5a       	subi	r31, 0xA3	; 163
      7a:	00 a0       	ldd	r0, Z+32	; 0x20
      7c:	72 4e       	sbci	r23, 0xE2	; 226
      7e:	18 09       	sbc	r17, r8
      80:	00 10       	cpse	r0, r0
      82:	a5 d4       	rcall	.+2378   	; 0x9ce <__stack+0x16f>
      84:	e8 00       	.word	0x00e8	; ????
      86:	00 e8       	ldi	r16, 0x80	; 128
      88:	76 48       	sbci	r23, 0x86	; 134
      8a:	17 00       	.word	0x0017	; ????
      8c:	00 e4       	ldi	r16, 0x40	; 64
      8e:	0b 54       	subi	r16, 0x4B	; 75
      90:	02 00       	.word	0x0002	; ????
      92:	00 ca       	rjmp	.-3072   	; 0xfffff494 <__eeprom_end+0xff7ef494>
      94:	9a 3b       	cpi	r25, 0xBA	; 186
      96:	00 00       	nop
      98:	00 e1       	ldi	r16, 0x10	; 16
      9a:	f5 05       	cpc	r31, r5
      9c:	00 00       	nop
      9e:	80 96       	adiw	r24, 0x20	; 32
      a0:	98 00       	.word	0x0098	; ????
      a2:	00 00       	nop
      a4:	40 42       	sbci	r20, 0x20	; 32
      a6:	0f 00       	.word	0x000f	; ????
      a8:	00 00       	nop
      aa:	a0 86       	std	Z+8, r10	; 0x08
      ac:	01 00       	.word	0x0001	; ????
      ae:	00 00       	nop
      b0:	10 27       	eor	r17, r16
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	e8 03       	fmulsu	r22, r16
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	64 00       	.word	0x0064	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	0a 00       	.word	0x000a	; ????
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	2c 76       	andi	r18, 0x6C	; 108
      d0:	d8 88       	ldd	r13, Y+16	; 0x10
      d2:	dc 67       	ori	r29, 0x7C	; 124
      d4:	4f 08       	sbc	r4, r15
      d6:	23 df       	rcall	.-442    	; 0xffffff1e <__eeprom_end+0xff7eff1e>
      d8:	c1 df       	rcall	.-126    	; 0x5c <__SREG__+0x1d>
      da:	ae 59       	subi	r26, 0x9E	; 158
      dc:	e1 b1       	in	r30, 0x01	; 1
      de:	b7 96       	adiw	r30, 0x27	; 39
      e0:	e5 e3       	ldi	r30, 0x35	; 53
      e2:	e4 53       	subi	r30, 0x34	; 52
      e4:	c6 3a       	cpi	r28, 0xA6	; 166
      e6:	e6 51       	subi	r30, 0x16	; 22
      e8:	99 76       	andi	r25, 0x69	; 105
      ea:	96 e8       	ldi	r25, 0x86	; 134
      ec:	e6 c2       	rjmp	.+1484   	; 0x6ba <LCD_displayCharacter+0x72>
      ee:	84 26       	eor	r8, r20
      f0:	eb 89       	ldd	r30, Y+19	; 0x13
      f2:	8c 9b       	sbis	0x11, 4	; 17
      f4:	62 ed       	ldi	r22, 0xD2	; 210
      f6:	40 7c       	andi	r20, 0xC0	; 192
      f8:	6f fc       	.word	0xfc6f	; ????
      fa:	ef bc       	out	0x2f, r14	; 47
      fc:	9c 9f       	mul	r25, r28
      fe:	40 f2       	brcs	.-112    	; 0x90 <__trampolines_end+0x1c>
     100:	ba a5       	ldd	r27, Y+42	; 0x2a
     102:	6f a5       	ldd	r22, Y+47	; 0x2f
     104:	f4 90       	lpm	r15, Z
     106:	05 5a       	subi	r16, 0xA5	; 165
     108:	2a f7       	brpl	.-54     	; 0xd4 <__trampolines_end+0x60>
     10a:	5c 93       	st	X, r21
     10c:	6b 6c       	ori	r22, 0xCB	; 203
     10e:	f9 67       	ori	r31, 0x79	; 121
     110:	6d c1       	rjmp	.+730    	; 0x3ec <KEYPAD_getPressedKey+0x18>
     112:	1b fc       	.word	0xfc1b	; ????
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	0d 47       	sbci	r16, 0x7D	; 125
     118:	fe f5       	brtc	.+126    	; 0x198 <__bad_interrupt>
     11a:	20 e6       	ldi	r18, 0x60	; 96
     11c:	b5 00       	.word	0x00b5	; ????
     11e:	d0 ed       	ldi	r29, 0xD0	; 208
     120:	90 2e       	mov	r9, r16
     122:	03 00       	.word	0x0003	; ????
     124:	94 35       	cpi	r25, 0x54	; 84
     126:	77 05       	cpc	r23, r7
     128:	00 80       	ld	r0, Z
     12a:	84 1e       	adc	r8, r20
     12c:	08 00       	.word	0x0008	; ????
     12e:	00 20       	and	r0, r0
     130:	4e 0a       	sbc	r4, r30
     132:	00 00       	nop
     134:	00 c8       	rjmp	.-4096   	; 0xfffff136 <__eeprom_end+0xff7ef136>
     136:	0c 33       	cpi	r16, 0x3C	; 60
     138:	33 33       	cpi	r19, 0x33	; 51
     13a:	33 0f       	add	r19, r19
     13c:	98 6e       	ori	r25, 0xE8	; 232
     13e:	12 83       	std	Z+2, r17	; 0x02
     140:	11 41       	sbci	r17, 0x11	; 17
     142:	ef 8d       	ldd	r30, Y+31	; 0x1f
     144:	21 14       	cp	r2, r1
     146:	89 3b       	cpi	r24, 0xB9	; 185
     148:	e6 55       	subi	r30, 0x56	; 86
     14a:	16 cf       	rjmp	.-468    	; 0xffffff78 <__eeprom_end+0xff7eff78>
     14c:	fe e6       	ldi	r31, 0x6E	; 110
     14e:	db 18       	sub	r13, r11
     150:	d1 84       	ldd	r13, Z+9	; 0x09
     152:	4b 38       	cpi	r20, 0x8B	; 139
     154:	1b f7       	brvc	.-58     	; 0x11c <__trampolines_end+0xa8>
     156:	7c 1d       	adc	r23, r12
     158:	90 1d       	adc	r25, r0
     15a:	a4 bb       	out	0x14, r26	; 20
     15c:	e4 24       	eor	r14, r4
     15e:	20 32       	cpi	r18, 0x20	; 32
     160:	84 72       	andi	r24, 0x24	; 36
     162:	5e 22       	and	r5, r30
     164:	81 00       	.word	0x0081	; ????
     166:	c9 f1       	breq	.+114    	; 0x1da <GPIO_setupPinDirection+0x3e>
     168:	24 ec       	ldi	r18, 0xC4	; 196
     16a:	a1 e5       	ldi	r26, 0x51	; 81
     16c:	3d 27       	eor	r19, r29

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf e5       	ldi	r28, 0x5F	; 95
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	a0 e6       	ldi	r26, 0x60	; 96
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e2 ea       	ldi	r30, 0xA2	; 162
     182:	f3 e1       	ldi	r31, 0x13	; 19
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 38       	cpi	r26, 0x84	; 132
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>
     190:	0e 94 20 04 	call	0x840	; 0x840 <main>
     194:	0c 94 cf 09 	jmp	0x139e	; 0x139e <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <GPIO_setupPinDirection>:

 //Setup the direction of the required pin input/output.
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
	//check the pin and port num
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     19c:	68 30       	cpi	r22, 0x08	; 8
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <GPIO_setupPinDirection+0x6>
     1a0:	6f c0       	rjmp	.+222    	; 0x280 <GPIO_setupPinDirection+0xe4>
     1a2:	84 30       	cpi	r24, 0x04	; 4
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <GPIO_setupPinDirection+0xc>
     1a6:	6c c0       	rjmp	.+216    	; 0x280 <GPIO_setupPinDirection+0xe4>
	{
	}
	else
	{
		// Setup the pin direction as required
		switch(port_num)
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	01 f1       	breq	.+64     	; 0x1ec <GPIO_setupPinDirection+0x50>
     1ac:	30 f0       	brcs	.+12     	; 0x1ba <GPIO_setupPinDirection+0x1e>
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	b1 f1       	breq	.+108    	; 0x21e <GPIO_setupPinDirection+0x82>
     1b2:	83 30       	cpi	r24, 0x03	; 3
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <GPIO_setupPinDirection+0x1c>
     1b6:	4c c0       	rjmp	.+152    	; 0x250 <GPIO_setupPinDirection+0xb4>
     1b8:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     1ba:	41 30       	cpi	r20, 0x01	; 1
     1bc:	59 f4       	brne	.+22     	; 0x1d4 <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
     1be:	2a b3       	in	r18, 0x1a	; 26
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <GPIO_setupPinDirection+0x2e>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <GPIO_setupPinDirection+0x2a>
     1ce:	82 2b       	or	r24, r18
     1d0:	8a bb       	out	0x1a, r24	; 26
     1d2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     1d4:	2a b3       	in	r18, 0x1a	; 26
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIO_setupPinDirection+0x44>
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	6a 95       	dec	r22
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIO_setupPinDirection+0x40>
     1e4:	80 95       	com	r24
     1e6:	82 23       	and	r24, r18
     1e8:	8a bb       	out	0x1a, r24	; 26
     1ea:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     1ec:	41 30       	cpi	r20, 0x01	; 1
     1ee:	59 f4       	brne	.+22     	; 0x206 <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
     1f0:	27 b3       	in	r18, 0x17	; 23
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <GPIO_setupPinDirection+0x60>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <GPIO_setupPinDirection+0x5c>
     200:	82 2b       	or	r24, r18
     202:	87 bb       	out	0x17, r24	; 23
     204:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     206:	27 b3       	in	r18, 0x17	; 23
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 c0       	rjmp	.+4      	; 0x212 <GPIO_setupPinDirection+0x76>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <GPIO_setupPinDirection+0x72>
     216:	80 95       	com	r24
     218:	82 23       	and	r24, r18
     21a:	87 bb       	out	0x17, r24	; 23
     21c:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     21e:	41 30       	cpi	r20, 0x01	; 1
     220:	59 f4       	brne	.+22     	; 0x238 <GPIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
     222:	24 b3       	in	r18, 0x14	; 20
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <GPIO_setupPinDirection+0x92>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <GPIO_setupPinDirection+0x8e>
     232:	82 2b       	or	r24, r18
     234:	84 bb       	out	0x14, r24	; 20
     236:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     238:	24 b3       	in	r18, 0x14	; 20
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	02 c0       	rjmp	.+4      	; 0x244 <GPIO_setupPinDirection+0xa8>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	6a 95       	dec	r22
     246:	e2 f7       	brpl	.-8      	; 0x240 <GPIO_setupPinDirection+0xa4>
     248:	80 95       	com	r24
     24a:	82 23       	and	r24, r18
     24c:	84 bb       	out	0x14, r24	; 20
     24e:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     250:	41 30       	cpi	r20, 0x01	; 1
     252:	59 f4       	brne	.+22     	; 0x26a <GPIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
     254:	21 b3       	in	r18, 0x11	; 17
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <GPIO_setupPinDirection+0xc4>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <GPIO_setupPinDirection+0xc0>
     264:	82 2b       	or	r24, r18
     266:	81 bb       	out	0x11, r24	; 17
     268:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     26a:	21 b3       	in	r18, 0x11	; 17
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 c0       	rjmp	.+4      	; 0x276 <GPIO_setupPinDirection+0xda>
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <GPIO_setupPinDirection+0xd6>
     27a:	80 95       	com	r24
     27c:	82 23       	and	r24, r18
     27e:	81 bb       	out	0x11, r24	; 17
     280:	08 95       	ret

00000282 <GPIO_writePin>:

 //Write the value Logic High or Logic Low on the required pin.
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
//check the pin and port num
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     282:	68 30       	cpi	r22, 0x08	; 8
     284:	08 f0       	brcs	.+2      	; 0x288 <GPIO_writePin+0x6>
     286:	6f c0       	rjmp	.+222    	; 0x366 <GPIO_writePin+0xe4>
     288:	84 30       	cpi	r24, 0x04	; 4
     28a:	08 f0       	brcs	.+2      	; 0x28e <GPIO_writePin+0xc>
     28c:	6c c0       	rjmp	.+216    	; 0x366 <GPIO_writePin+0xe4>
	{
	}
	else
	{
//Write the pin value as required 
		switch(port_num)
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	01 f1       	breq	.+64     	; 0x2d2 <GPIO_writePin+0x50>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <GPIO_writePin+0x1e>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	b1 f1       	breq	.+108    	; 0x304 <GPIO_writePin+0x82>
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	09 f4       	brne	.+2      	; 0x29e <GPIO_writePin+0x1c>
     29c:	4c c0       	rjmp	.+152    	; 0x336 <GPIO_writePin+0xb4>
     29e:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     2a0:	41 30       	cpi	r20, 0x01	; 1
     2a2:	59 f4       	brne	.+22     	; 0x2ba <GPIO_writePin+0x38>
			{
				SET_BIT(PORTA,pin_num);
     2a4:	2b b3       	in	r18, 0x1b	; 27
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <GPIO_writePin+0x2e>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <GPIO_writePin+0x2a>
     2b4:	82 2b       	or	r24, r18
     2b6:	8b bb       	out	0x1b, r24	; 27
     2b8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     2ba:	2b b3       	in	r18, 0x1b	; 27
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <GPIO_writePin+0x44>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <GPIO_writePin+0x40>
     2ca:	80 95       	com	r24
     2cc:	82 23       	and	r24, r18
     2ce:	8b bb       	out	0x1b, r24	; 27
     2d0:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     2d2:	41 30       	cpi	r20, 0x01	; 1
     2d4:	59 f4       	brne	.+22     	; 0x2ec <GPIO_writePin+0x6a>
			{
				SET_BIT(PORTB,pin_num);
     2d6:	28 b3       	in	r18, 0x18	; 24
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <GPIO_writePin+0x60>
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <GPIO_writePin+0x5c>
     2e6:	82 2b       	or	r24, r18
     2e8:	88 bb       	out	0x18, r24	; 24
     2ea:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     2ec:	28 b3       	in	r18, 0x18	; 24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <GPIO_writePin+0x76>
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	6a 95       	dec	r22
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <GPIO_writePin+0x72>
     2fc:	80 95       	com	r24
     2fe:	82 23       	and	r24, r18
     300:	88 bb       	out	0x18, r24	; 24
     302:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     304:	41 30       	cpi	r20, 0x01	; 1
     306:	59 f4       	brne	.+22     	; 0x31e <GPIO_writePin+0x9c>
			{
				SET_BIT(PORTC,pin_num);
     308:	25 b3       	in	r18, 0x15	; 21
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <GPIO_writePin+0x92>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	6a 95       	dec	r22
     316:	e2 f7       	brpl	.-8      	; 0x310 <GPIO_writePin+0x8e>
     318:	82 2b       	or	r24, r18
     31a:	85 bb       	out	0x15, r24	; 21
     31c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     31e:	25 b3       	in	r18, 0x15	; 21
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <GPIO_writePin+0xa8>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <GPIO_writePin+0xa4>
     32e:	80 95       	com	r24
     330:	82 23       	and	r24, r18
     332:	85 bb       	out	0x15, r24	; 21
     334:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     336:	41 30       	cpi	r20, 0x01	; 1
     338:	59 f4       	brne	.+22     	; 0x350 <GPIO_writePin+0xce>
			{
				SET_BIT(PORTD,pin_num);
     33a:	22 b3       	in	r18, 0x12	; 18
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	02 c0       	rjmp	.+4      	; 0x346 <GPIO_writePin+0xc4>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	6a 95       	dec	r22
     348:	e2 f7       	brpl	.-8      	; 0x342 <GPIO_writePin+0xc0>
     34a:	82 2b       	or	r24, r18
     34c:	82 bb       	out	0x12, r24	; 18
     34e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     350:	22 b3       	in	r18, 0x12	; 18
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 c0       	rjmp	.+4      	; 0x35c <GPIO_writePin+0xda>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	6a 95       	dec	r22
     35e:	e2 f7       	brpl	.-8      	; 0x358 <GPIO_writePin+0xd6>
     360:	80 95       	com	r24
     362:	82 23       	and	r24, r18
     364:	82 bb       	out	0x12, r24	; 18
     366:	08 95       	ret

00000368 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;

	//check the pin and port num
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     368:	68 30       	cpi	r22, 0x08	; 8
     36a:	70 f5       	brcc	.+92     	; 0x3c8 <GPIO_readPin+0x60>
     36c:	84 30       	cpi	r24, 0x04	; 4
     36e:	70 f5       	brcc	.+92     	; 0x3cc <GPIO_readPin+0x64>
	{
	}
	else
	{
//Read the pin value as required 
		switch(port_num)
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	79 f0       	breq	.+30     	; 0x392 <GPIO_readPin+0x2a>
     374:	28 f0       	brcs	.+10     	; 0x380 <GPIO_readPin+0x18>
     376:	82 30       	cpi	r24, 0x02	; 2
     378:	a9 f0       	breq	.+42     	; 0x3a4 <GPIO_readPin+0x3c>
     37a:	83 30       	cpi	r24, 0x03	; 3
     37c:	e1 f0       	breq	.+56     	; 0x3b6 <GPIO_readPin+0x4e>
     37e:	28 c0       	rjmp	.+80     	; 0x3d0 <GPIO_readPin+0x68>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     380:	89 b3       	in	r24, 0x19	; 25
}

//read pins
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <GPIO_readPin+0x22>
     386:	95 95       	asr	r25
     388:	87 95       	ror	r24
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <GPIO_readPin+0x1e>
     38e:	81 70       	andi	r24, 0x01	; 1
     390:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     392:	86 b3       	in	r24, 0x16	; 22
}

//read pins
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <GPIO_readPin+0x34>
     398:	95 95       	asr	r25
     39a:	87 95       	ror	r24
     39c:	6a 95       	dec	r22
     39e:	e2 f7       	brpl	.-8      	; 0x398 <GPIO_readPin+0x30>
     3a0:	81 70       	andi	r24, 0x01	; 1
     3a2:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     3a4:	83 b3       	in	r24, 0x13	; 19
}

//read pins
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <GPIO_readPin+0x46>
     3aa:	95 95       	asr	r25
     3ac:	87 95       	ror	r24
     3ae:	6a 95       	dec	r22
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <GPIO_readPin+0x42>
     3b2:	81 70       	andi	r24, 0x01	; 1
     3b4:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     3b6:	80 b3       	in	r24, 0x10	; 16
}

//read pins
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <GPIO_readPin+0x58>
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	6a 95       	dec	r22
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <GPIO_readPin+0x54>
     3c4:	81 70       	andi	r24, 0x01	; 1
     3c6:	08 95       	ret
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	08 95       	ret
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	08 95       	ret
     3d0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
     3d2:	08 95       	ret

000003d4 <KEYPAD_getPressedKey>:
#elif (KEYPAD_NUM_COLS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif

uint8 KEYPAD_getPressedKey(void)
{
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	64 e0       	ldi	r22, 0x04	; 4
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	65 e0       	ldi	r22, 0x05	; 5
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	66 e0       	ldi	r22, 0x06	; 6
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	67 e0       	ldi	r22, 0x07	; 7
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	62 e0       	ldi	r22, 0x02	; 2
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	63 e0       	ldi	r22, 0x03	; 3
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	64 e0       	ldi	r22, 0x04	; 4
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	65 e0       	ldi	r22, 0x05	; 5
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     42a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     42c:	14 e0       	ldi	r17, 0x04	; 4
     42e:	1d 0f       	add	r17, r29
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	61 2f       	mov	r22, r17
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	61 2f       	mov	r22, r17
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     444:	c0 e0       	ldi	r28, 0x00	; 0
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	6c 0f       	add	r22, r28
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	0e 94 b4 01 	call	0x368	; 0x368 <GPIO_readPin>
     450:	81 11       	cpse	r24, r1
     452:	2f c0       	rjmp	.+94     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     454:	cf 5f       	subi	r28, 0xFF	; 255
     456:	dd 0f       	add	r29, r29
     458:	dd 0f       	add	r29, r29
     45a:	cd 0f       	add	r28, r29

 //Update the keypad pressed button value with the correct one in keypad 4x4 shape
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     45c:	8c 2f       	mov	r24, r28
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	e0 31       	cpi	r30, 0x10	; 16
     466:	f1 05       	cpc	r31, r1
     468:	b8 f5       	brcc	.+110    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     46a:	e6 5d       	subi	r30, 0xD6	; 214
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
     46e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__tablejump2__>
	{
		case 1: keypad_button = 7;
				break;
		case 2: keypad_button = 8;
     472:	c8 e0       	ldi	r28, 0x08	; 8
     474:	31 c0       	rjmp	.+98     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 3: keypad_button = 9;
     476:	c9 e0       	ldi	r28, 0x09	; 9
     478:	2f c0       	rjmp	.+94     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
     47a:	cf e2       	ldi	r28, 0x2F	; 47
     47c:	2d c0       	rjmp	.+90     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 5: keypad_button = 4;
     47e:	c4 e0       	ldi	r28, 0x04	; 4
     480:	2b c0       	rjmp	.+86     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 6: keypad_button = 5;
     482:	c5 e0       	ldi	r28, 0x05	; 5
     484:	29 c0       	rjmp	.+82     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 7: keypad_button = 6;
     486:	c6 e0       	ldi	r28, 0x06	; 6
     488:	27 c0       	rjmp	.+78     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     48a:	ca e2       	ldi	r28, 0x2A	; 42
     48c:	25 c0       	rjmp	.+74     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 9: keypad_button = 1;
     48e:	c1 e0       	ldi	r28, 0x01	; 1
     490:	23 c0       	rjmp	.+70     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 10: keypad_button = 2;
     492:	c2 e0       	ldi	r28, 0x02	; 2
     494:	21 c0       	rjmp	.+66     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 11: keypad_button = 3;
     496:	c3 e0       	ldi	r28, 0x03	; 3
     498:	1f c0       	rjmp	.+62     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     49a:	cd e2       	ldi	r28, 0x2D	; 45
     49c:	1d c0       	rjmp	.+58     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 13: keypad_button = 'c';  /* ASCII of Enter */
     49e:	c3 e6       	ldi	r28, 0x63	; 99
     4a0:	1b c0       	rjmp	.+54     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 14: keypad_button = 0;
     4a2:	c0 e0       	ldi	r28, 0x00	; 0
     4a4:	19 c0       	rjmp	.+50     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     4a6:	cd e3       	ldi	r28, 0x3D	; 61
     4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     4aa:	cb e2       	ldi	r28, 0x2B	; 43
     4ac:	15 c0       	rjmp	.+42     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
     4ae:	c7 e0       	ldi	r28, 0x07	; 7
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     4b0:	13 c0       	rjmp	.+38     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     4b2:	cf 5f       	subi	r28, 0xFF	; 255
     4b4:	c4 30       	cpi	r28, 0x04	; 4
     4b6:	39 f6       	brne	.-114    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	61 2f       	mov	r22, r17
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c2:	83 ec       	ldi	r24, 0xC3	; 195
     4c4:	99 e0       	ldi	r25, 0x09	; 9
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4cc:	00 00       	nop
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     4ce:	df 5f       	subi	r29, 0xFF	; 255
     4d0:	d4 30       	cpi	r29, 0x04	; 4
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d4:	ab cf       	rjmp	.-170    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     4d6:	a9 cf       	rjmp	.-174    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); // Add small delay to fix CPU load issue in proteus 
		}
	}	
}
     4d8:	8c 2f       	mov	r24, r28
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <LCD_sendCommand>:
}

 //Send the required command to the screen
 
void LCD_sendCommand(uint8 command)
{
     4e2:	cf 93       	push	r28
     4e4:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     4f0:	89 ef       	ldi	r24, 0xF9	; 249
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_sendCommand+0x12>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_sendCommand+0x18>
     4fa:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     506:	89 ef       	ldi	r24, 0xF9	; 249
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_sendCommand+0x28>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_sendCommand+0x2e>
     510:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
     512:	c4 fb       	bst	r28, 4
     514:	44 27       	eor	r20, r20
     516:	40 f9       	bld	r20, 0
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
     520:	c5 fb       	bst	r28, 5
     522:	44 27       	eor	r20, r20
     524:	40 f9       	bld	r20, 0
     526:	64 e0       	ldi	r22, 0x04	; 4
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
     52e:	c6 fb       	bst	r28, 6
     530:	44 27       	eor	r20, r20
     532:	40 f9       	bld	r20, 0
     534:	65 e0       	ldi	r22, 0x05	; 5
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
     53c:	4c 2f       	mov	r20, r28
     53e:	44 1f       	adc	r20, r20
     540:	44 27       	eor	r20, r20
     542:	44 1f       	adc	r20, r20
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     54c:	89 ef       	ldi	r24, 0xF9	; 249
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <LCD_sendCommand+0x6e>
     554:	00 c0       	rjmp	.+0      	; 0x556 <LCD_sendCommand+0x74>
     556:	00 00       	nop
	_delay_ms(1); 
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	62 e0       	ldi	r22, 0x02	; 2
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     562:	89 ef       	ldi	r24, 0xF9	; 249
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <LCD_sendCommand+0x84>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <LCD_sendCommand+0x8a>
     56c:	00 00       	nop
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	62 e0       	ldi	r22, 0x02	; 2
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     578:	89 ef       	ldi	r24, 0xF9	; 249
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_sendCommand+0x9a>
     580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_sendCommand+0xa0>
     582:	00 00       	nop
	_delay_ms(1); 
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
     584:	4c 2f       	mov	r20, r28
     586:	41 70       	andi	r20, 0x01	; 1
     588:	63 e0       	ldi	r22, 0x03	; 3
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
     590:	c1 fb       	bst	r28, 1
     592:	44 27       	eor	r20, r20
     594:	40 f9       	bld	r20, 0
     596:	64 e0       	ldi	r22, 0x04	; 4
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
     59e:	c2 fb       	bst	r28, 2
     5a0:	44 27       	eor	r20, r20
     5a2:	40 f9       	bld	r20, 0
     5a4:	65 e0       	ldi	r22, 0x05	; 5
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
     5ac:	c3 fb       	bst	r28, 3
     5ae:	44 27       	eor	r20, r20
     5b0:	40 f9       	bld	r20, 0
     5b2:	66 e0       	ldi	r22, 0x06	; 6
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     5ba:	89 ef       	ldi	r24, 0xF9	; 249
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <LCD_sendCommand+0xdc>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <LCD_sendCommand+0xe2>
     5c4:	00 00       	nop
	_delay_ms(1); 
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     5d0:	89 ef       	ldi	r24, 0xF9	; 249
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_sendCommand+0xf2>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_sendCommand+0xf8>
     5da:	00 00       	nop
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 -> D7 */
	_delay_ms(1); 
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); 
#endif
}
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <LCD_init>:
#include "gpio.h"

void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     5ea:	41 e0       	ldi	r20, 0x01	; 1
     5ec:	62 e0       	ldi	r22, 0x02	; 2
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
     5f4:	87 e8       	ldi	r24, 0x87	; 135
     5f6:	93 e1       	ldi	r25, 0x13	; 19
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_init+0x18>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_init+0x1e>
     5fe:	00 00       	nop
	_delay_ms(20);	

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	63 e0       	ldi	r22, 0x03	; 3
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	64 e0       	ldi	r22, 0x04	; 4
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
     614:	41 e0       	ldi	r20, 0x01	; 1
     616:	65 e0       	ldi	r22, 0x05	; 5
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
     61e:	41 e0       	ldi	r20, 0x01	; 1
     620:	66 e0       	ldi	r22, 0x06	; 6
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 ce 00 	call	0x19c	; 0x19c <GPIO_setupPinDirection>
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
     628:	83 e3       	ldi	r24, 0x33	; 51
     62a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
     62e:	82 e3       	ldi	r24, 0x32	; 50
     630:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
	/* use 2-lines LCD + 4bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
     634:	88 e2       	ldi	r24, 0x28	; 40
     636:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     63a:	8c e0       	ldi	r24, 0x0C	; 12
     63c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
     646:	08 95       	ret

00000648 <LCD_displayCharacter>:
#endif
}
 // Display the required character on the screen
 
void LCD_displayCharacter(uint8 data)
{
     648:	cf 93       	push	r28
     64a:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     656:	89 ef       	ldi	r24, 0xF9	; 249
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <LCD_displayCharacter+0x12>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <LCD_displayCharacter+0x18>
     660:	00 00       	nop
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     66c:	89 ef       	ldi	r24, 0xF9	; 249
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <LCD_displayCharacter+0x28>
     674:	00 c0       	rjmp	.+0      	; 0x676 <LCD_displayCharacter+0x2e>
     676:	00 00       	nop
	_delay_ms(1); 
#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
     678:	c4 fb       	bst	r28, 4
     67a:	44 27       	eor	r20, r20
     67c:	40 f9       	bld	r20, 0
     67e:	63 e0       	ldi	r22, 0x03	; 3
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
     686:	c5 fb       	bst	r28, 5
     688:	44 27       	eor	r20, r20
     68a:	40 f9       	bld	r20, 0
     68c:	64 e0       	ldi	r22, 0x04	; 4
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
     694:	c6 fb       	bst	r28, 6
     696:	44 27       	eor	r20, r20
     698:	40 f9       	bld	r20, 0
     69a:	65 e0       	ldi	r22, 0x05	; 5
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
     6a2:	4c 2f       	mov	r20, r28
     6a4:	44 1f       	adc	r20, r20
     6a6:	44 27       	eor	r20, r20
     6a8:	44 1f       	adc	r20, r20
     6aa:	66 e0       	ldi	r22, 0x06	; 6
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     6b2:	89 ef       	ldi	r24, 0xF9	; 249
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_displayCharacter+0x6e>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_displayCharacter+0x74>
     6bc:	00 00       	nop

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	62 e0       	ldi	r22, 0x02	; 2
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     6c8:	89 ef       	ldi	r24, 0xF9	; 249
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCD_displayCharacter+0x84>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <LCD_displayCharacter+0x8a>
     6d2:	00 00       	nop
	_delay_ms(1); 
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	62 e0       	ldi	r22, 0x02	; 2
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     6de:	89 ef       	ldi	r24, 0xF9	; 249
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <LCD_displayCharacter+0x9a>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <LCD_displayCharacter+0xa0>
     6e8:	00 00       	nop
	_delay_ms(1); 
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
     6ea:	4c 2f       	mov	r20, r28
     6ec:	41 70       	andi	r20, 0x01	; 1
     6ee:	63 e0       	ldi	r22, 0x03	; 3
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
     6f6:	c1 fb       	bst	r28, 1
     6f8:	44 27       	eor	r20, r20
     6fa:	40 f9       	bld	r20, 0
     6fc:	64 e0       	ldi	r22, 0x04	; 4
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
     704:	c2 fb       	bst	r28, 2
     706:	44 27       	eor	r20, r20
     708:	40 f9       	bld	r20, 0
     70a:	65 e0       	ldi	r22, 0x05	; 5
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
     712:	c3 fb       	bst	r28, 3
     714:	44 27       	eor	r20, r20
     716:	40 f9       	bld	r20, 0
     718:	66 e0       	ldi	r22, 0x06	; 6
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     720:	89 ef       	ldi	r24, 0xF9	; 249
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <LCD_displayCharacter+0xdc>
     728:	00 c0       	rjmp	.+0      	; 0x72a <LCD_displayCharacter+0xe2>
     72a:	00 00       	nop
	_delay_ms(1); 
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	62 e0       	ldi	r22, 0x02	; 2
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 41 01 	call	0x282	; 0x282 <GPIO_writePin>
     736:	89 ef       	ldi	r24, 0xF9	; 249
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <LCD_displayCharacter+0xf2>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <LCD_displayCharacter+0xf8>
     740:	00 00       	nop
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 -> D7 */
	_delay_ms(1); 
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);
#endif
}
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <LCD_displayString>:
 //Display the required string on the screen
void LCD_displayString(const char *Str)
{
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	fc 01       	movw	r30, r24
	uint8 i = 0;
	while(Str[i] != '\0')
     74e:	80 81       	ld	r24, Z
     750:	88 23       	and	r24, r24
     752:	59 f0       	breq	.+22     	; 0x76a <LCD_displayString+0x24>
     754:	8f 01       	movw	r16, r30
     756:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_displayCharacter(Str[i]);
     758:	0e 94 24 03 	call	0x648	; 0x648 <LCD_displayCharacter>
		i++;
     75c:	cf 5f       	subi	r28, 0xFF	; 255
}
 //Display the required string on the screen
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     75e:	f8 01       	movw	r30, r16
     760:	ec 0f       	add	r30, r28
     762:	f1 1d       	adc	r31, r1
     764:	80 81       	ld	r24, Z
     766:	81 11       	cpse	r24, r1
     768:	f7 cf       	rjmp	.-18     	; 0x758 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	08 95       	ret

00000772 <LCD_moveCursor>:
 
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	41 f0       	breq	.+16     	; 0x786 <LCD_moveCursor+0x14>
     776:	28 f0       	brcs	.+10     	; 0x782 <LCD_moveCursor+0x10>
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	41 f0       	breq	.+16     	; 0x78c <LCD_moveCursor+0x1a>
     77c:	83 30       	cpi	r24, 0x03	; 3
     77e:	49 f0       	breq	.+18     	; 0x792 <LCD_moveCursor+0x20>
     780:	0a c0       	rjmp	.+20     	; 0x796 <LCD_moveCursor+0x24>
	{
		case 0:
			lcd_memory_address=col;
     782:	96 2f       	mov	r25, r22
     784:	08 c0       	rjmp	.+16     	; 0x796 <LCD_moveCursor+0x24>
				break;
		case 1:
			lcd_memory_address=col+0x40;
     786:	90 e4       	ldi	r25, 0x40	; 64
     788:	96 0f       	add	r25, r22
				break;
     78a:	05 c0       	rjmp	.+10     	; 0x796 <LCD_moveCursor+0x24>
		case 2:
			lcd_memory_address=col+0x10;
     78c:	90 e1       	ldi	r25, 0x10	; 16
     78e:	96 0f       	add	r25, r22
				break;
     790:	02 c0       	rjmp	.+4      	; 0x796 <LCD_moveCursor+0x24>
		case 3:
			lcd_memory_address=col+0x50;
     792:	90 e5       	ldi	r25, 0x50	; 80
     794:	96 0f       	add	r25, r22
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     796:	89 2f       	mov	r24, r25
     798:	80 68       	ori	r24, 0x80	; 128
     79a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
     79e:	08 95       	ret

000007a0 <LCD_displayStringRowColumn>:
}

 // Display the required string in a specified row and column index on the screen

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ea 01       	movw	r28, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     7a6:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
     7aa:	ce 01       	movw	r24, r28
     7ac:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_displayString>
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <LCD_intgerToString>:

 // Display the required decimal value on the screen
 
void LCD_intgerToString(int data)
{
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	60 97       	sbiw	r28, 0x10	; 16
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     7ca:	4a e0       	ldi	r20, 0x0A	; 10
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	0e 94 26 07 	call	0xe4c	; 0xe4c <itoa>
   LCD_displayString(buff); /* Display the string */
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_displayString>
}
     7e0:	60 96       	adiw	r28, 0x10	; 16
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <LCD_floatToString>:

 // Display the required float value on the screen

void LCD_floatToString(float data)
{
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	64 97       	sbiw	r28, 0x14	; 20
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
    char buffer[20];  /* Create a buffer to hold the float as a string */
    dtostrf(data, 2,2, buffer);  /* Convert the float to string with 2 decimal places */
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	22 e0       	ldi	r18, 0x02	; 2
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	42 e0       	ldi	r20, 0x02	; 2
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	0e 94 06 07 	call	0xe0c	; 0xe0c <dtostrf>
    LCD_displayString(buffer);  /* Display the string on the LCD */
     81c:	c8 01       	movw	r24, r16
     81e:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_displayString>
}
     822:	64 96       	adiw	r28, 0x14	; 20
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <LCD_clearScreen>:

 // Send the clear screen command
 
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_sendCommand>
     83e:	08 95       	ret

00000840 <main>:
{
	unsigned char key;
	float number1 = 0, number2 = 0;
	float result = 0;
	char operation = 0;
	LCD_init();
     840:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_init>
	LCD_displayStringRowColumn(0, 3,"Calculator");
     844:	40 e6       	ldi	r20, 0x60	; 96
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_displayStringRowColumn>
     850:	2f e3       	ldi	r18, 0x3F	; 63
     852:	8d e0       	ldi	r24, 0x0D	; 13
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	21 50       	subi	r18, 0x01	; 1
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <main+0x16>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
	_delay_ms(1000);
	LCD_clearScreen();
     862:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_clearScreen>
int main(void)
{
	unsigned char key;
	float number1 = 0, number2 = 0;
	float result = 0;
	char operation = 0;
     866:	10 e0       	ldi	r17, 0x00	; 0
#include "keypad.h"
#include <util/delay.h>
int main(void)
{
	unsigned char key;
	float number1 = 0, number2 = 0;
     868:	c1 2c       	mov	r12, r1
     86a:	d1 2c       	mov	r13, r1
     86c:	e1 2c       	mov	r14, r1
     86e:	f1 2c       	mov	r15, r1
     870:	91 2c       	mov	r9, r1
     872:	a1 2c       	mov	r10, r1
     874:	b1 2c       	mov	r11, r1
     876:	00 e0       	ldi	r16, 0x00	; 0
		else if (key == '+' || key == '-' || key == '*' || key == '/')
		{
			operation = key;
			LCD_displayCharacter(operation);
			number1 = number2;
			number2 = 0;
     878:	61 2c       	mov	r6, r1
     87a:	71 2c       	mov	r7, r1
     87c:	81 2c       	mov	r8, r1
     87e:	51 2c       	mov	r5, r1
	_delay_ms(1000);
	LCD_clearScreen();

	while(1)
	{
		key = KEYPAD_getPressedKey();
     880:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <KEYPAD_getPressedKey>
     884:	c8 2f       	mov	r28, r24

		if ( (key >= 0 ) && (key <= 9) )
     886:	8a 30       	cpi	r24, 0x0A	; 10
     888:	00 f5       	brcc	.+64     	; 0x8ca <__stack+0x6b>
		{
			LCD_intgerToString(key);
     88a:	c8 2f       	mov	r28, r24
     88c:	d0 e0       	ldi	r29, 0x00	; 0
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_intgerToString>
			number2 = (number2*10) + key;
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e2       	ldi	r20, 0x20	; 32
     89a:	51 e4       	ldi	r21, 0x41	; 65
     89c:	6c 2d       	mov	r22, r12
     89e:	7d 2d       	mov	r23, r13
     8a0:	8e 2d       	mov	r24, r14
     8a2:	9f 2d       	mov	r25, r15
     8a4:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
     8a8:	6b 01       	movw	r12, r22
     8aa:	7c 01       	movw	r14, r24
     8ac:	be 01       	movw	r22, r28
     8ae:	dd 0f       	add	r29, r29
     8b0:	88 0b       	sbc	r24, r24
     8b2:	99 0b       	sbc	r25, r25
     8b4:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
     8b8:	a7 01       	movw	r20, r14
     8ba:	96 01       	movw	r18, r12
     8bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__addsf3>
     8c0:	c6 2e       	mov	r12, r22
     8c2:	d7 2e       	mov	r13, r23
     8c4:	e8 2e       	mov	r14, r24
     8c6:	f9 2e       	mov	r15, r25
     8c8:	8e c0       	rjmp	.+284    	; 0x9e6 <__stack+0x187>
		}

		else if (key == '+' || key == '-' || key == '*' || key == '/')
     8ca:	8d 7f       	andi	r24, 0xFD	; 253
     8cc:	8d 32       	cpi	r24, 0x2D	; 45
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <__stack+0x79>
     8d0:	86 ed       	ldi	r24, 0xD6	; 214
     8d2:	8c 0f       	add	r24, r28
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	68 f4       	brcc	.+26     	; 0x8f2 <__stack+0x93>
		{
			operation = key;
			LCD_displayCharacter(operation);
     8d8:	8c 2f       	mov	r24, r28
     8da:	0e 94 24 03 	call	0x648	; 0x648 <LCD_displayCharacter>
			number2 = (number2*10) + key;
		}

		else if (key == '+' || key == '-' || key == '*' || key == '/')
		{
			operation = key;
     8de:	1c 2f       	mov	r17, r28
			LCD_displayCharacter(operation);
			number1 = number2;
     8e0:	9c 2c       	mov	r9, r12
     8e2:	ad 2c       	mov	r10, r13
     8e4:	be 2c       	mov	r11, r14
     8e6:	0f 2d       	mov	r16, r15
			number2 = 0;
     8e8:	c6 2c       	mov	r12, r6
     8ea:	d7 2c       	mov	r13, r7
     8ec:	e8 2c       	mov	r14, r8
     8ee:	f5 2c       	mov	r15, r5
     8f0:	7a c0       	rjmp	.+244    	; 0x9e6 <__stack+0x187>
		}

		else if (key == '=')
     8f2:	cd 33       	cpi	r28, 0x3D	; 61
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <__stack+0x99>
     8f6:	6b c0       	rjmp	.+214    	; 0x9ce <__stack+0x16f>
		{
			switch (operation)
     8f8:	1b 32       	cpi	r17, 0x2B	; 43
     8fa:	49 f0       	breq	.+18     	; 0x90e <__stack+0xaf>
     8fc:	18 f4       	brcc	.+6      	; 0x904 <__stack+0xa5>
     8fe:	1a 32       	cpi	r17, 0x2A	; 42
     900:	41 f1       	breq	.+80     	; 0x952 <__stack+0xf3>
     902:	5c c0       	rjmp	.+184    	; 0x9bc <__stack+0x15d>
     904:	1d 32       	cpi	r17, 0x2D	; 45
     906:	a1 f0       	breq	.+40     	; 0x930 <__stack+0xd1>
     908:	1f 32       	cpi	r17, 0x2F	; 47
     90a:	a1 f1       	breq	.+104    	; 0x974 <__stack+0x115>
     90c:	57 c0       	rjmp	.+174    	; 0x9bc <__stack+0x15d>
			{
				case '+':
				LCD_moveCursor(1,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_moveCursor>
				result = number1 + number2;
				LCD_floatToString(result);
     916:	2c 2d       	mov	r18, r12
     918:	3d 2d       	mov	r19, r13
     91a:	4e 2d       	mov	r20, r14
     91c:	5f 2d       	mov	r21, r15
     91e:	69 2d       	mov	r22, r9
     920:	7a 2d       	mov	r23, r10
     922:	8b 2d       	mov	r24, r11
     924:	90 2f       	mov	r25, r16
     926:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__addsf3>
     92a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_floatToString>
				break;
     92e:	5b c0       	rjmp	.+182    	; 0x9e6 <__stack+0x187>
				case '-':
				LCD_moveCursor(1,0);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_moveCursor>
				result = number1 - number2;
				LCD_floatToString(result);
     938:	2c 2d       	mov	r18, r12
     93a:	3d 2d       	mov	r19, r13
     93c:	4e 2d       	mov	r20, r14
     93e:	5f 2d       	mov	r21, r15
     940:	69 2d       	mov	r22, r9
     942:	7a 2d       	mov	r23, r10
     944:	8b 2d       	mov	r24, r11
     946:	90 2f       	mov	r25, r16
     948:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__subsf3>
     94c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_floatToString>
				break;
     950:	4a c0       	rjmp	.+148    	; 0x9e6 <__stack+0x187>
				case '*':
				LCD_moveCursor(1,0);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_moveCursor>
				result = number1 * number2;
				LCD_floatToString(result);
     95a:	2c 2d       	mov	r18, r12
     95c:	3d 2d       	mov	r19, r13
     95e:	4e 2d       	mov	r20, r14
     960:	5f 2d       	mov	r21, r15
     962:	69 2d       	mov	r22, r9
     964:	7a 2d       	mov	r23, r10
     966:	8b 2d       	mov	r24, r11
     968:	90 2f       	mov	r25, r16
     96a:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
     96e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_floatToString>
				break;
     972:	39 c0       	rjmp	.+114    	; 0x9e6 <__stack+0x187>
				case '/':
				if (number2 != 0)
     974:	26 2d       	mov	r18, r6
     976:	37 2d       	mov	r19, r7
     978:	48 2d       	mov	r20, r8
     97a:	55 2d       	mov	r21, r5
     97c:	6c 2d       	mov	r22, r12
     97e:	7d 2d       	mov	r23, r13
     980:	8e 2d       	mov	r24, r14
     982:	9f 2d       	mov	r25, r15
     984:	0e 94 6a 05 	call	0xad4	; 0xad4 <__cmpsf2>
     988:	88 23       	and	r24, r24
     98a:	89 f0       	breq	.+34     	; 0x9ae <__stack+0x14f>
				{
					LCD_moveCursor(1,0);
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_moveCursor>
					result = number1 / number2;
					LCD_floatToString(result);
     994:	2c 2d       	mov	r18, r12
     996:	3d 2d       	mov	r19, r13
     998:	4e 2d       	mov	r20, r14
     99a:	5f 2d       	mov	r21, r15
     99c:	69 2d       	mov	r22, r9
     99e:	7a 2d       	mov	r23, r10
     9a0:	8b 2d       	mov	r24, r11
     9a2:	90 2f       	mov	r25, r16
     9a4:	0e 94 6f 05 	call	0xade	; 0xade <__divsf3>
     9a8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_floatToString>
				else
				{
					LCD_displayStringRowColumn(0 , 0 ,"Math Error");
					continue;
				}
				break;
     9ac:	1c c0       	rjmp	.+56     	; 0x9e6 <__stack+0x187>
					LCD_floatToString(result);

				}
				else
				{
					LCD_displayStringRowColumn(0 , 0 ,"Math Error");
     9ae:	4b e6       	ldi	r20, 0x6B	; 107
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_displayStringRowColumn>
					continue;
     9ba:	62 cf       	rjmp	.-316    	; 0x880 <__stack+0x21>
				}
				break;
				default:
				LCD_moveCursor(1,0);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_moveCursor>
				LCD_displayString("NO Operation");
     9c4:	86 e7       	ldi	r24, 0x76	; 118
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_displayString>
				break;
     9cc:	0c c0       	rjmp	.+24     	; 0x9e6 <__stack+0x187>
			}
		}

		else if (key == 'c')
     9ce:	c3 36       	cpi	r28, 0x63	; 99
     9d0:	51 f4       	brne	.+20     	; 0x9e6 <__stack+0x187>
		{
			LCD_clearScreen();
     9d2:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_clearScreen>
			number1 = 0;
			number2 = 0;
     9d6:	c6 2c       	mov	r12, r6
     9d8:	d7 2c       	mov	r13, r7
     9da:	e8 2c       	mov	r14, r8
     9dc:	f5 2c       	mov	r15, r5
		}

		else if (key == 'c')
		{
			LCD_clearScreen();
			number1 = 0;
     9de:	96 2c       	mov	r9, r6
     9e0:	a7 2c       	mov	r10, r7
     9e2:	b8 2c       	mov	r11, r8
     9e4:	05 2d       	mov	r16, r5
     9e6:	2f e9       	ldi	r18, 0x9F	; 159
     9e8:	86 e8       	ldi	r24, 0x86	; 134
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	21 50       	subi	r18, 0x01	; 1
     9ee:	80 40       	sbci	r24, 0x00	; 0
     9f0:	90 40       	sbci	r25, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0x18d>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <__stack+0x197>
     9f6:	00 00       	nop
     9f8:	43 cf       	rjmp	.-378    	; 0x880 <__stack+0x21>

000009fa <__subsf3>:
     9fa:	50 58       	subi	r21, 0x80	; 128

000009fc <__addsf3>:
     9fc:	bb 27       	eor	r27, r27
     9fe:	aa 27       	eor	r26, r26
     a00:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3x>
     a04:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_round>
     a08:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_pscA>
     a0c:	38 f0       	brcs	.+14     	; 0xa1c <__addsf3+0x20>
     a0e:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscB>
     a12:	20 f0       	brcs	.+8      	; 0xa1c <__addsf3+0x20>
     a14:	39 f4       	brne	.+14     	; 0xa24 <__addsf3+0x28>
     a16:	9f 3f       	cpi	r25, 0xFF	; 255
     a18:	19 f4       	brne	.+6      	; 0xa20 <__addsf3+0x24>
     a1a:	26 f4       	brtc	.+8      	; 0xa24 <__addsf3+0x28>
     a1c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_nan>
     a20:	0e f4       	brtc	.+2      	; 0xa24 <__addsf3+0x28>
     a22:	e0 95       	com	r30
     a24:	e7 fb       	bst	r30, 7
     a26:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>

00000a2a <__addsf3x>:
     a2a:	e9 2f       	mov	r30, r25
     a2c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_split3>
     a30:	58 f3       	brcs	.-42     	; 0xa08 <__addsf3+0xc>
     a32:	ba 17       	cp	r27, r26
     a34:	62 07       	cpc	r22, r18
     a36:	73 07       	cpc	r23, r19
     a38:	84 07       	cpc	r24, r20
     a3a:	95 07       	cpc	r25, r21
     a3c:	20 f0       	brcs	.+8      	; 0xa46 <__addsf3x+0x1c>
     a3e:	79 f4       	brne	.+30     	; 0xa5e <__addsf3x+0x34>
     a40:	a6 f5       	brtc	.+104    	; 0xaaa <__addsf3x+0x80>
     a42:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_zero>
     a46:	0e f4       	brtc	.+2      	; 0xa4a <__addsf3x+0x20>
     a48:	e0 95       	com	r30
     a4a:	0b 2e       	mov	r0, r27
     a4c:	ba 2f       	mov	r27, r26
     a4e:	a0 2d       	mov	r26, r0
     a50:	0b 01       	movw	r0, r22
     a52:	b9 01       	movw	r22, r18
     a54:	90 01       	movw	r18, r0
     a56:	0c 01       	movw	r0, r24
     a58:	ca 01       	movw	r24, r20
     a5a:	a0 01       	movw	r20, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	ff 27       	eor	r31, r31
     a60:	59 1b       	sub	r21, r25
     a62:	99 f0       	breq	.+38     	; 0xa8a <__addsf3x+0x60>
     a64:	59 3f       	cpi	r21, 0xF9	; 249
     a66:	50 f4       	brcc	.+20     	; 0xa7c <__addsf3x+0x52>
     a68:	50 3e       	cpi	r21, 0xE0	; 224
     a6a:	68 f1       	brcs	.+90     	; 0xac6 <__addsf3x+0x9c>
     a6c:	1a 16       	cp	r1, r26
     a6e:	f0 40       	sbci	r31, 0x00	; 0
     a70:	a2 2f       	mov	r26, r18
     a72:	23 2f       	mov	r18, r19
     a74:	34 2f       	mov	r19, r20
     a76:	44 27       	eor	r20, r20
     a78:	58 5f       	subi	r21, 0xF8	; 248
     a7a:	f3 cf       	rjmp	.-26     	; 0xa62 <__addsf3x+0x38>
     a7c:	46 95       	lsr	r20
     a7e:	37 95       	ror	r19
     a80:	27 95       	ror	r18
     a82:	a7 95       	ror	r26
     a84:	f0 40       	sbci	r31, 0x00	; 0
     a86:	53 95       	inc	r21
     a88:	c9 f7       	brne	.-14     	; 0xa7c <__addsf3x+0x52>
     a8a:	7e f4       	brtc	.+30     	; 0xaaa <__addsf3x+0x80>
     a8c:	1f 16       	cp	r1, r31
     a8e:	ba 0b       	sbc	r27, r26
     a90:	62 0b       	sbc	r22, r18
     a92:	73 0b       	sbc	r23, r19
     a94:	84 0b       	sbc	r24, r20
     a96:	ba f0       	brmi	.+46     	; 0xac6 <__addsf3x+0x9c>
     a98:	91 50       	subi	r25, 0x01	; 1
     a9a:	a1 f0       	breq	.+40     	; 0xac4 <__addsf3x+0x9a>
     a9c:	ff 0f       	add	r31, r31
     a9e:	bb 1f       	adc	r27, r27
     aa0:	66 1f       	adc	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	88 1f       	adc	r24, r24
     aa6:	c2 f7       	brpl	.-16     	; 0xa98 <__addsf3x+0x6e>
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <__addsf3x+0x9c>
     aaa:	ba 0f       	add	r27, r26
     aac:	62 1f       	adc	r22, r18
     aae:	73 1f       	adc	r23, r19
     ab0:	84 1f       	adc	r24, r20
     ab2:	48 f4       	brcc	.+18     	; 0xac6 <__addsf3x+0x9c>
     ab4:	87 95       	ror	r24
     ab6:	77 95       	ror	r23
     ab8:	67 95       	ror	r22
     aba:	b7 95       	ror	r27
     abc:	f7 95       	ror	r31
     abe:	9e 3f       	cpi	r25, 0xFE	; 254
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <__addsf3x+0x9a>
     ac2:	b0 cf       	rjmp	.-160    	; 0xa24 <__addsf3+0x28>
     ac4:	93 95       	inc	r25
     ac6:	88 0f       	add	r24, r24
     ac8:	08 f0       	brcs	.+2      	; 0xacc <__addsf3x+0xa2>
     aca:	99 27       	eor	r25, r25
     acc:	ee 0f       	add	r30, r30
     ace:	97 95       	ror	r25
     ad0:	87 95       	ror	r24
     ad2:	08 95       	ret

00000ad4 <__cmpsf2>:
     ad4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_cmp>
     ad8:	08 f4       	brcc	.+2      	; 0xadc <__cmpsf2+0x8>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	08 95       	ret

00000ade <__divsf3>:
     ade:	0e 94 83 05 	call	0xb06	; 0xb06 <__divsf3x>
     ae2:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_round>
     ae6:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscB>
     aea:	58 f0       	brcs	.+22     	; 0xb02 <__divsf3+0x24>
     aec:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_pscA>
     af0:	40 f0       	brcs	.+16     	; 0xb02 <__divsf3+0x24>
     af2:	29 f4       	brne	.+10     	; 0xafe <__divsf3+0x20>
     af4:	5f 3f       	cpi	r21, 0xFF	; 255
     af6:	29 f0       	breq	.+10     	; 0xb02 <__divsf3+0x24>
     af8:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>
     afc:	51 11       	cpse	r21, r1
     afe:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>
     b02:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_nan>

00000b06 <__divsf3x>:
     b06:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_split3>
     b0a:	68 f3       	brcs	.-38     	; 0xae6 <__divsf3+0x8>

00000b0c <__divsf3_pse>:
     b0c:	99 23       	and	r25, r25
     b0e:	b1 f3       	breq	.-20     	; 0xafc <__divsf3+0x1e>
     b10:	55 23       	and	r21, r21
     b12:	91 f3       	breq	.-28     	; 0xaf8 <__divsf3+0x1a>
     b14:	95 1b       	sub	r25, r21
     b16:	55 0b       	sbc	r21, r21
     b18:	bb 27       	eor	r27, r27
     b1a:	aa 27       	eor	r26, r26
     b1c:	62 17       	cp	r22, r18
     b1e:	73 07       	cpc	r23, r19
     b20:	84 07       	cpc	r24, r20
     b22:	38 f0       	brcs	.+14     	; 0xb32 <__divsf3_pse+0x26>
     b24:	9f 5f       	subi	r25, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	44 1f       	adc	r20, r20
     b2e:	aa 1f       	adc	r26, r26
     b30:	a9 f3       	breq	.-22     	; 0xb1c <__divsf3_pse+0x10>
     b32:	35 d0       	rcall	.+106    	; 0xb9e <__divsf3_pse+0x92>
     b34:	0e 2e       	mov	r0, r30
     b36:	3a f0       	brmi	.+14     	; 0xb46 <__divsf3_pse+0x3a>
     b38:	e0 e8       	ldi	r30, 0x80	; 128
     b3a:	32 d0       	rcall	.+100    	; 0xba0 <__divsf3_pse+0x94>
     b3c:	91 50       	subi	r25, 0x01	; 1
     b3e:	50 40       	sbci	r21, 0x00	; 0
     b40:	e6 95       	lsr	r30
     b42:	00 1c       	adc	r0, r0
     b44:	ca f7       	brpl	.-14     	; 0xb38 <__divsf3_pse+0x2c>
     b46:	2b d0       	rcall	.+86     	; 0xb9e <__divsf3_pse+0x92>
     b48:	fe 2f       	mov	r31, r30
     b4a:	29 d0       	rcall	.+82     	; 0xb9e <__divsf3_pse+0x92>
     b4c:	66 0f       	add	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	88 1f       	adc	r24, r24
     b52:	bb 1f       	adc	r27, r27
     b54:	26 17       	cp	r18, r22
     b56:	37 07       	cpc	r19, r23
     b58:	48 07       	cpc	r20, r24
     b5a:	ab 07       	cpc	r26, r27
     b5c:	b0 e8       	ldi	r27, 0x80	; 128
     b5e:	09 f0       	breq	.+2      	; 0xb62 <__divsf3_pse+0x56>
     b60:	bb 0b       	sbc	r27, r27
     b62:	80 2d       	mov	r24, r0
     b64:	bf 01       	movw	r22, r30
     b66:	ff 27       	eor	r31, r31
     b68:	93 58       	subi	r25, 0x83	; 131
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	3a f0       	brmi	.+14     	; 0xb7c <__divsf3_pse+0x70>
     b6e:	9e 3f       	cpi	r25, 0xFE	; 254
     b70:	51 05       	cpc	r21, r1
     b72:	78 f0       	brcs	.+30     	; 0xb92 <__divsf3_pse+0x86>
     b74:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>
     b78:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>
     b7c:	5f 3f       	cpi	r21, 0xFF	; 255
     b7e:	e4 f3       	brlt	.-8      	; 0xb78 <__divsf3_pse+0x6c>
     b80:	98 3e       	cpi	r25, 0xE8	; 232
     b82:	d4 f3       	brlt	.-12     	; 0xb78 <__divsf3_pse+0x6c>
     b84:	86 95       	lsr	r24
     b86:	77 95       	ror	r23
     b88:	67 95       	ror	r22
     b8a:	b7 95       	ror	r27
     b8c:	f7 95       	ror	r31
     b8e:	9f 5f       	subi	r25, 0xFF	; 255
     b90:	c9 f7       	brne	.-14     	; 0xb84 <__divsf3_pse+0x78>
     b92:	88 0f       	add	r24, r24
     b94:	91 1d       	adc	r25, r1
     b96:	96 95       	lsr	r25
     b98:	87 95       	ror	r24
     b9a:	97 f9       	bld	r25, 7
     b9c:	08 95       	ret
     b9e:	e1 e0       	ldi	r30, 0x01	; 1
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	88 1f       	adc	r24, r24
     ba6:	bb 1f       	adc	r27, r27
     ba8:	62 17       	cp	r22, r18
     baa:	73 07       	cpc	r23, r19
     bac:	84 07       	cpc	r24, r20
     bae:	ba 07       	cpc	r27, r26
     bb0:	20 f0       	brcs	.+8      	; 0xbba <__divsf3_pse+0xae>
     bb2:	62 1b       	sub	r22, r18
     bb4:	73 0b       	sbc	r23, r19
     bb6:	84 0b       	sbc	r24, r20
     bb8:	ba 0b       	sbc	r27, r26
     bba:	ee 1f       	adc	r30, r30
     bbc:	88 f7       	brcc	.-30     	; 0xba0 <__divsf3_pse+0x94>
     bbe:	e0 95       	com	r30
     bc0:	08 95       	ret

00000bc2 <__floatunsisf>:
     bc2:	e8 94       	clt
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__floatsisf+0x12>

00000bc6 <__floatsisf>:
     bc6:	97 fb       	bst	r25, 7
     bc8:	3e f4       	brtc	.+14     	; 0xbd8 <__floatsisf+0x12>
     bca:	90 95       	com	r25
     bcc:	80 95       	com	r24
     bce:	70 95       	com	r23
     bd0:	61 95       	neg	r22
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	8f 4f       	sbci	r24, 0xFF	; 255
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	99 23       	and	r25, r25
     bda:	a9 f0       	breq	.+42     	; 0xc06 <__floatsisf+0x40>
     bdc:	f9 2f       	mov	r31, r25
     bde:	96 e9       	ldi	r25, 0x96	; 150
     be0:	bb 27       	eor	r27, r27
     be2:	93 95       	inc	r25
     be4:	f6 95       	lsr	r31
     be6:	87 95       	ror	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b7 95       	ror	r27
     bee:	f1 11       	cpse	r31, r1
     bf0:	f8 cf       	rjmp	.-16     	; 0xbe2 <__floatsisf+0x1c>
     bf2:	fa f4       	brpl	.+62     	; 0xc32 <__floatsisf+0x6c>
     bf4:	bb 0f       	add	r27, r27
     bf6:	11 f4       	brne	.+4      	; 0xbfc <__floatsisf+0x36>
     bf8:	60 ff       	sbrs	r22, 0
     bfa:	1b c0       	rjmp	.+54     	; 0xc32 <__floatsisf+0x6c>
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	8f 4f       	sbci	r24, 0xFF	; 255
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	16 c0       	rjmp	.+44     	; 0xc32 <__floatsisf+0x6c>
     c06:	88 23       	and	r24, r24
     c08:	11 f0       	breq	.+4      	; 0xc0e <__floatsisf+0x48>
     c0a:	96 e9       	ldi	r25, 0x96	; 150
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <__floatsisf+0x6a>
     c0e:	77 23       	and	r23, r23
     c10:	21 f0       	breq	.+8      	; 0xc1a <__floatsisf+0x54>
     c12:	9e e8       	ldi	r25, 0x8E	; 142
     c14:	87 2f       	mov	r24, r23
     c16:	76 2f       	mov	r23, r22
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <__floatsisf+0x5e>
     c1a:	66 23       	and	r22, r22
     c1c:	71 f0       	breq	.+28     	; 0xc3a <__floatsisf+0x74>
     c1e:	96 e8       	ldi	r25, 0x86	; 134
     c20:	86 2f       	mov	r24, r22
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	2a f0       	brmi	.+10     	; 0xc32 <__floatsisf+0x6c>
     c28:	9a 95       	dec	r25
     c2a:	66 0f       	add	r22, r22
     c2c:	77 1f       	adc	r23, r23
     c2e:	88 1f       	adc	r24, r24
     c30:	da f7       	brpl	.-10     	; 0xc28 <__floatsisf+0x62>
     c32:	88 0f       	add	r24, r24
     c34:	96 95       	lsr	r25
     c36:	87 95       	ror	r24
     c38:	97 f9       	bld	r25, 7
     c3a:	08 95       	ret

00000c3c <__fp_cmp>:
     c3c:	99 0f       	add	r25, r25
     c3e:	00 08       	sbc	r0, r0
     c40:	55 0f       	add	r21, r21
     c42:	aa 0b       	sbc	r26, r26
     c44:	e0 e8       	ldi	r30, 0x80	; 128
     c46:	fe ef       	ldi	r31, 0xFE	; 254
     c48:	16 16       	cp	r1, r22
     c4a:	17 06       	cpc	r1, r23
     c4c:	e8 07       	cpc	r30, r24
     c4e:	f9 07       	cpc	r31, r25
     c50:	c0 f0       	brcs	.+48     	; 0xc82 <__fp_cmp+0x46>
     c52:	12 16       	cp	r1, r18
     c54:	13 06       	cpc	r1, r19
     c56:	e4 07       	cpc	r30, r20
     c58:	f5 07       	cpc	r31, r21
     c5a:	98 f0       	brcs	.+38     	; 0xc82 <__fp_cmp+0x46>
     c5c:	62 1b       	sub	r22, r18
     c5e:	73 0b       	sbc	r23, r19
     c60:	84 0b       	sbc	r24, r20
     c62:	95 0b       	sbc	r25, r21
     c64:	39 f4       	brne	.+14     	; 0xc74 <__fp_cmp+0x38>
     c66:	0a 26       	eor	r0, r26
     c68:	61 f0       	breq	.+24     	; 0xc82 <__fp_cmp+0x46>
     c6a:	23 2b       	or	r18, r19
     c6c:	24 2b       	or	r18, r20
     c6e:	25 2b       	or	r18, r21
     c70:	21 f4       	brne	.+8      	; 0xc7a <__fp_cmp+0x3e>
     c72:	08 95       	ret
     c74:	0a 26       	eor	r0, r26
     c76:	09 f4       	brne	.+2      	; 0xc7a <__fp_cmp+0x3e>
     c78:	a1 40       	sbci	r26, 0x01	; 1
     c7a:	a6 95       	lsr	r26
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	81 1d       	adc	r24, r1
     c80:	81 1d       	adc	r24, r1
     c82:	08 95       	ret

00000c84 <__fp_inf>:
     c84:	97 f9       	bld	r25, 7
     c86:	9f 67       	ori	r25, 0x7F	; 127
     c88:	80 e8       	ldi	r24, 0x80	; 128
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <__fp_nan>:
     c90:	9f ef       	ldi	r25, 0xFF	; 255
     c92:	80 ec       	ldi	r24, 0xC0	; 192
     c94:	08 95       	ret

00000c96 <__fp_pscA>:
     c96:	00 24       	eor	r0, r0
     c98:	0a 94       	dec	r0
     c9a:	16 16       	cp	r1, r22
     c9c:	17 06       	cpc	r1, r23
     c9e:	18 06       	cpc	r1, r24
     ca0:	09 06       	cpc	r0, r25
     ca2:	08 95       	ret

00000ca4 <__fp_pscB>:
     ca4:	00 24       	eor	r0, r0
     ca6:	0a 94       	dec	r0
     ca8:	12 16       	cp	r1, r18
     caa:	13 06       	cpc	r1, r19
     cac:	14 06       	cpc	r1, r20
     cae:	05 06       	cpc	r0, r21
     cb0:	08 95       	ret

00000cb2 <__fp_round>:
     cb2:	09 2e       	mov	r0, r25
     cb4:	03 94       	inc	r0
     cb6:	00 0c       	add	r0, r0
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__fp_round+0xc>
     cba:	88 23       	and	r24, r24
     cbc:	52 f0       	brmi	.+20     	; 0xcd2 <__fp_round+0x20>
     cbe:	bb 0f       	add	r27, r27
     cc0:	40 f4       	brcc	.+16     	; 0xcd2 <__fp_round+0x20>
     cc2:	bf 2b       	or	r27, r31
     cc4:	11 f4       	brne	.+4      	; 0xcca <__fp_round+0x18>
     cc6:	60 ff       	sbrs	r22, 0
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__fp_round+0x20>
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	8f 4f       	sbci	r24, 0xFF	; 255
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	08 95       	ret

00000cd4 <__fp_split3>:
     cd4:	57 fd       	sbrc	r21, 7
     cd6:	90 58       	subi	r25, 0x80	; 128
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	59 f0       	breq	.+22     	; 0xcf4 <__fp_splitA+0x10>
     cde:	5f 3f       	cpi	r21, 0xFF	; 255
     ce0:	71 f0       	breq	.+28     	; 0xcfe <__fp_splitA+0x1a>
     ce2:	47 95       	ror	r20

00000ce4 <__fp_splitA>:
     ce4:	88 0f       	add	r24, r24
     ce6:	97 fb       	bst	r25, 7
     ce8:	99 1f       	adc	r25, r25
     cea:	61 f0       	breq	.+24     	; 0xd04 <__fp_splitA+0x20>
     cec:	9f 3f       	cpi	r25, 0xFF	; 255
     cee:	79 f0       	breq	.+30     	; 0xd0e <__fp_splitA+0x2a>
     cf0:	87 95       	ror	r24
     cf2:	08 95       	ret
     cf4:	12 16       	cp	r1, r18
     cf6:	13 06       	cpc	r1, r19
     cf8:	14 06       	cpc	r1, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	f2 cf       	rjmp	.-28     	; 0xce2 <__fp_split3+0xe>
     cfe:	46 95       	lsr	r20
     d00:	f1 df       	rcall	.-30     	; 0xce4 <__fp_splitA>
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <__fp_splitA+0x30>
     d04:	16 16       	cp	r1, r22
     d06:	17 06       	cpc	r1, r23
     d08:	18 06       	cpc	r1, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	f1 cf       	rjmp	.-30     	; 0xcf0 <__fp_splitA+0xc>
     d0e:	86 95       	lsr	r24
     d10:	71 05       	cpc	r23, r1
     d12:	61 05       	cpc	r22, r1
     d14:	08 94       	sec
     d16:	08 95       	ret

00000d18 <__fp_zero>:
     d18:	e8 94       	clt

00000d1a <__fp_szero>:
     d1a:	bb 27       	eor	r27, r27
     d1c:	66 27       	eor	r22, r22
     d1e:	77 27       	eor	r23, r23
     d20:	cb 01       	movw	r24, r22
     d22:	97 f9       	bld	r25, 7
     d24:	08 95       	ret

00000d26 <__mulsf3>:
     d26:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3x>
     d2a:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_round>
     d2e:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_pscA>
     d32:	38 f0       	brcs	.+14     	; 0xd42 <__mulsf3+0x1c>
     d34:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscB>
     d38:	20 f0       	brcs	.+8      	; 0xd42 <__mulsf3+0x1c>
     d3a:	95 23       	and	r25, r21
     d3c:	11 f0       	breq	.+4      	; 0xd42 <__mulsf3+0x1c>
     d3e:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>
     d42:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_nan>
     d46:	11 24       	eor	r1, r1
     d48:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>

00000d4c <__mulsf3x>:
     d4c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_split3>
     d50:	70 f3       	brcs	.-36     	; 0xd2e <__mulsf3+0x8>

00000d52 <__mulsf3_pse>:
     d52:	95 9f       	mul	r25, r21
     d54:	c1 f3       	breq	.-16     	; 0xd46 <__mulsf3+0x20>
     d56:	95 0f       	add	r25, r21
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	55 1f       	adc	r21, r21
     d5c:	62 9f       	mul	r22, r18
     d5e:	f0 01       	movw	r30, r0
     d60:	72 9f       	mul	r23, r18
     d62:	bb 27       	eor	r27, r27
     d64:	f0 0d       	add	r31, r0
     d66:	b1 1d       	adc	r27, r1
     d68:	63 9f       	mul	r22, r19
     d6a:	aa 27       	eor	r26, r26
     d6c:	f0 0d       	add	r31, r0
     d6e:	b1 1d       	adc	r27, r1
     d70:	aa 1f       	adc	r26, r26
     d72:	64 9f       	mul	r22, r20
     d74:	66 27       	eor	r22, r22
     d76:	b0 0d       	add	r27, r0
     d78:	a1 1d       	adc	r26, r1
     d7a:	66 1f       	adc	r22, r22
     d7c:	82 9f       	mul	r24, r18
     d7e:	22 27       	eor	r18, r18
     d80:	b0 0d       	add	r27, r0
     d82:	a1 1d       	adc	r26, r1
     d84:	62 1f       	adc	r22, r18
     d86:	73 9f       	mul	r23, r19
     d88:	b0 0d       	add	r27, r0
     d8a:	a1 1d       	adc	r26, r1
     d8c:	62 1f       	adc	r22, r18
     d8e:	83 9f       	mul	r24, r19
     d90:	a0 0d       	add	r26, r0
     d92:	61 1d       	adc	r22, r1
     d94:	22 1f       	adc	r18, r18
     d96:	74 9f       	mul	r23, r20
     d98:	33 27       	eor	r19, r19
     d9a:	a0 0d       	add	r26, r0
     d9c:	61 1d       	adc	r22, r1
     d9e:	23 1f       	adc	r18, r19
     da0:	84 9f       	mul	r24, r20
     da2:	60 0d       	add	r22, r0
     da4:	21 1d       	adc	r18, r1
     da6:	82 2f       	mov	r24, r18
     da8:	76 2f       	mov	r23, r22
     daa:	6a 2f       	mov	r22, r26
     dac:	11 24       	eor	r1, r1
     dae:	9f 57       	subi	r25, 0x7F	; 127
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	9a f0       	brmi	.+38     	; 0xdda <__mulsf3_pse+0x88>
     db4:	f1 f0       	breq	.+60     	; 0xdf2 <__mulsf3_pse+0xa0>
     db6:	88 23       	and	r24, r24
     db8:	4a f0       	brmi	.+18     	; 0xdcc <__mulsf3_pse+0x7a>
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	bb 1f       	adc	r27, r27
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	91 50       	subi	r25, 0x01	; 1
     dc8:	50 40       	sbci	r21, 0x00	; 0
     dca:	a9 f7       	brne	.-22     	; 0xdb6 <__mulsf3_pse+0x64>
     dcc:	9e 3f       	cpi	r25, 0xFE	; 254
     dce:	51 05       	cpc	r21, r1
     dd0:	80 f0       	brcs	.+32     	; 0xdf2 <__mulsf3_pse+0xa0>
     dd2:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>
     dd6:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>
     dda:	5f 3f       	cpi	r21, 0xFF	; 255
     ddc:	e4 f3       	brlt	.-8      	; 0xdd6 <__mulsf3_pse+0x84>
     dde:	98 3e       	cpi	r25, 0xE8	; 232
     de0:	d4 f3       	brlt	.-12     	; 0xdd6 <__mulsf3_pse+0x84>
     de2:	86 95       	lsr	r24
     de4:	77 95       	ror	r23
     de6:	67 95       	ror	r22
     de8:	b7 95       	ror	r27
     dea:	f7 95       	ror	r31
     dec:	e7 95       	ror	r30
     dee:	9f 5f       	subi	r25, 0xFF	; 255
     df0:	c1 f7       	brne	.-16     	; 0xde2 <__mulsf3_pse+0x90>
     df2:	fe 2b       	or	r31, r30
     df4:	88 0f       	add	r24, r24
     df6:	91 1d       	adc	r25, r1
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	97 f9       	bld	r25, 7
     dfe:	08 95       	ret

00000e00 <__tablejump2__>:
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	05 90       	lpm	r0, Z+
     e06:	f4 91       	lpm	r31, Z
     e08:	e0 2d       	mov	r30, r0
     e0a:	09 94       	ijmp

00000e0c <dtostrf>:
     e0c:	ef 92       	push	r14
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	e8 01       	movw	r28, r16
     e18:	47 fd       	sbrc	r20, 7
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <dtostrf+0x14>
     e1c:	34 e0       	ldi	r19, 0x04	; 4
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <dtostrf+0x16>
     e20:	34 e1       	ldi	r19, 0x14	; 20
     e22:	04 2e       	mov	r0, r20
     e24:	00 0c       	add	r0, r0
     e26:	55 0b       	sbc	r21, r21
     e28:	57 ff       	sbrs	r21, 7
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <dtostrf+0x26>
     e2c:	51 95       	neg	r21
     e2e:	41 95       	neg	r20
     e30:	51 09       	sbc	r21, r1
     e32:	e3 2e       	mov	r14, r19
     e34:	02 2f       	mov	r16, r18
     e36:	24 2f       	mov	r18, r20
     e38:	ae 01       	movw	r20, r28
     e3a:	0e 94 56 07 	call	0xeac	; 0xeac <dtoa_prf>
     e3e:	ce 01       	movw	r24, r28
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <itoa>:
     e4c:	45 32       	cpi	r20, 0x25	; 37
     e4e:	51 05       	cpc	r21, r1
     e50:	20 f4       	brcc	.+8      	; 0xe5a <itoa+0xe>
     e52:	42 30       	cpi	r20, 0x02	; 2
     e54:	10 f0       	brcs	.+4      	; 0xe5a <itoa+0xe>
     e56:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__itoa_ncheck>
     e5a:	fb 01       	movw	r30, r22
     e5c:	10 82       	st	Z, r1
     e5e:	cb 01       	movw	r24, r22
     e60:	08 95       	ret

00000e62 <__itoa_ncheck>:
     e62:	bb 27       	eor	r27, r27
     e64:	4a 30       	cpi	r20, 0x0A	; 10
     e66:	31 f4       	brne	.+12     	; 0xe74 <__itoa_ncheck+0x12>
     e68:	99 23       	and	r25, r25
     e6a:	22 f4       	brpl	.+8      	; 0xe74 <__itoa_ncheck+0x12>
     e6c:	bd e2       	ldi	r27, 0x2D	; 45
     e6e:	90 95       	com	r25
     e70:	81 95       	neg	r24
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__utoa_common>

00000e78 <__utoa_ncheck>:
     e78:	bb 27       	eor	r27, r27

00000e7a <__utoa_common>:
     e7a:	fb 01       	movw	r30, r22
     e7c:	55 27       	eor	r21, r21
     e7e:	aa 27       	eor	r26, r26
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	aa 1f       	adc	r26, r26
     e86:	a4 17       	cp	r26, r20
     e88:	10 f0       	brcs	.+4      	; 0xe8e <__utoa_common+0x14>
     e8a:	a4 1b       	sub	r26, r20
     e8c:	83 95       	inc	r24
     e8e:	50 51       	subi	r21, 0x10	; 16
     e90:	b9 f7       	brne	.-18     	; 0xe80 <__utoa_common+0x6>
     e92:	a0 5d       	subi	r26, 0xD0	; 208
     e94:	aa 33       	cpi	r26, 0x3A	; 58
     e96:	08 f0       	brcs	.+2      	; 0xe9a <__utoa_common+0x20>
     e98:	a9 5d       	subi	r26, 0xD9	; 217
     e9a:	a1 93       	st	Z+, r26
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	79 f7       	brne	.-34     	; 0xe7e <__utoa_common+0x4>
     ea0:	b1 11       	cpse	r27, r1
     ea2:	b1 93       	st	Z+, r27
     ea4:	11 92       	st	Z+, r1
     ea6:	cb 01       	movw	r24, r22
     ea8:	0c 94 88 09 	jmp	0x1310	; 0x1310 <strrev>

00000eac <dtoa_prf>:
     eac:	a9 e0       	ldi	r26, 0x09	; 9
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ec e5       	ldi	r30, 0x5C	; 92
     eb2:	f7 e0       	ldi	r31, 0x07	; 7
     eb4:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__prologue_saves__+0xc>
     eb8:	6a 01       	movw	r12, r20
     eba:	12 2f       	mov	r17, r18
     ebc:	b0 2e       	mov	r11, r16
     ebe:	2b e3       	ldi	r18, 0x3B	; 59
     ec0:	20 17       	cp	r18, r16
     ec2:	20 f0       	brcs	.+8      	; 0xecc <dtoa_prf+0x20>
     ec4:	ff 24       	eor	r15, r15
     ec6:	f3 94       	inc	r15
     ec8:	f0 0e       	add	r15, r16
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <dtoa_prf+0x24>
     ecc:	2c e3       	ldi	r18, 0x3C	; 60
     ece:	f2 2e       	mov	r15, r18
     ed0:	0f 2d       	mov	r16, r15
     ed2:	27 e0       	ldi	r18, 0x07	; 7
     ed4:	ae 01       	movw	r20, r28
     ed6:	4f 5f       	subi	r20, 0xFF	; 255
     ed8:	5f 4f       	sbci	r21, 0xFF	; 255
     eda:	0e 94 b0 08 	call	0x1160	; 0x1160 <__ftoa_engine>
     ede:	bc 01       	movw	r22, r24
     ee0:	49 81       	ldd	r20, Y+1	; 0x01
     ee2:	84 2f       	mov	r24, r20
     ee4:	89 70       	andi	r24, 0x09	; 9
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	31 f0       	breq	.+12     	; 0xef6 <dtoa_prf+0x4a>
     eea:	e1 fc       	sbrc	r14, 1
     eec:	06 c0       	rjmp	.+12     	; 0xefa <dtoa_prf+0x4e>
     eee:	e0 fe       	sbrs	r14, 0
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <dtoa_prf+0x52>
     ef2:	90 e2       	ldi	r25, 0x20	; 32
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <dtoa_prf+0x54>
     ef6:	9d e2       	ldi	r25, 0x2D	; 45
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <dtoa_prf+0x54>
     efa:	9b e2       	ldi	r25, 0x2B	; 43
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <dtoa_prf+0x54>
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	5e 2d       	mov	r21, r14
     f02:	50 71       	andi	r21, 0x10	; 16
     f04:	43 ff       	sbrs	r20, 3
     f06:	3c c0       	rjmp	.+120    	; 0xf80 <dtoa_prf+0xd4>
     f08:	91 11       	cpse	r25, r1
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <dtoa_prf+0x64>
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <dtoa_prf+0x66>
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	81 17       	cp	r24, r17
     f14:	18 f4       	brcc	.+6      	; 0xf1c <dtoa_prf+0x70>
     f16:	21 2f       	mov	r18, r17
     f18:	28 1b       	sub	r18, r24
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <dtoa_prf+0x72>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	51 11       	cpse	r21, r1
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <dtoa_prf+0x8c>
     f22:	f6 01       	movw	r30, r12
     f24:	82 2f       	mov	r24, r18
     f26:	30 e2       	ldi	r19, 0x20	; 32
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <dtoa_prf+0x86>
     f2c:	31 93       	st	Z+, r19
     f2e:	81 50       	subi	r24, 0x01	; 1
     f30:	fb cf       	rjmp	.-10     	; 0xf28 <dtoa_prf+0x7c>
     f32:	c2 0e       	add	r12, r18
     f34:	d1 1c       	adc	r13, r1
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	99 23       	and	r25, r25
     f3a:	29 f0       	breq	.+10     	; 0xf46 <dtoa_prf+0x9a>
     f3c:	d6 01       	movw	r26, r12
     f3e:	9c 93       	st	X, r25
     f40:	f6 01       	movw	r30, r12
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	6f 01       	movw	r12, r30
     f46:	c6 01       	movw	r24, r12
     f48:	03 96       	adiw	r24, 0x03	; 3
     f4a:	e2 fe       	sbrs	r14, 2
     f4c:	0a c0       	rjmp	.+20     	; 0xf62 <dtoa_prf+0xb6>
     f4e:	3e e4       	ldi	r19, 0x4E	; 78
     f50:	d6 01       	movw	r26, r12
     f52:	3c 93       	st	X, r19
     f54:	41 e4       	ldi	r20, 0x41	; 65
     f56:	11 96       	adiw	r26, 0x01	; 1
     f58:	4c 93       	st	X, r20
     f5a:	11 97       	sbiw	r26, 0x01	; 1
     f5c:	12 96       	adiw	r26, 0x02	; 2
     f5e:	3c 93       	st	X, r19
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <dtoa_prf+0xc2>
     f62:	3e e6       	ldi	r19, 0x6E	; 110
     f64:	f6 01       	movw	r30, r12
     f66:	30 83       	st	Z, r19
     f68:	41 e6       	ldi	r20, 0x61	; 97
     f6a:	41 83       	std	Z+1, r20	; 0x01
     f6c:	32 83       	std	Z+2, r19	; 0x02
     f6e:	fc 01       	movw	r30, r24
     f70:	32 2f       	mov	r19, r18
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	33 23       	and	r19, r19
     f76:	09 f4       	brne	.+2      	; 0xf7a <dtoa_prf+0xce>
     f78:	42 c0       	rjmp	.+132    	; 0xffe <dtoa_prf+0x152>
     f7a:	41 93       	st	Z+, r20
     f7c:	31 50       	subi	r19, 0x01	; 1
     f7e:	fa cf       	rjmp	.-12     	; 0xf74 <dtoa_prf+0xc8>
     f80:	42 ff       	sbrs	r20, 2
     f82:	44 c0       	rjmp	.+136    	; 0x100c <dtoa_prf+0x160>
     f84:	91 11       	cpse	r25, r1
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <dtoa_prf+0xe0>
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <dtoa_prf+0xe2>
     f8c:	84 e0       	ldi	r24, 0x04	; 4
     f8e:	81 17       	cp	r24, r17
     f90:	18 f4       	brcc	.+6      	; 0xf98 <dtoa_prf+0xec>
     f92:	21 2f       	mov	r18, r17
     f94:	28 1b       	sub	r18, r24
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <dtoa_prf+0xee>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	51 11       	cpse	r21, r1
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <dtoa_prf+0x108>
     f9e:	f6 01       	movw	r30, r12
     fa0:	82 2f       	mov	r24, r18
     fa2:	30 e2       	ldi	r19, 0x20	; 32
     fa4:	88 23       	and	r24, r24
     fa6:	19 f0       	breq	.+6      	; 0xfae <dtoa_prf+0x102>
     fa8:	31 93       	st	Z+, r19
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	fb cf       	rjmp	.-10     	; 0xfa4 <dtoa_prf+0xf8>
     fae:	c2 0e       	add	r12, r18
     fb0:	d1 1c       	adc	r13, r1
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	99 23       	and	r25, r25
     fb6:	29 f0       	breq	.+10     	; 0xfc2 <dtoa_prf+0x116>
     fb8:	d6 01       	movw	r26, r12
     fba:	9c 93       	st	X, r25
     fbc:	f6 01       	movw	r30, r12
     fbe:	31 96       	adiw	r30, 0x01	; 1
     fc0:	6f 01       	movw	r12, r30
     fc2:	c6 01       	movw	r24, r12
     fc4:	03 96       	adiw	r24, 0x03	; 3
     fc6:	e2 fe       	sbrs	r14, 2
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <dtoa_prf+0x134>
     fca:	39 e4       	ldi	r19, 0x49	; 73
     fcc:	d6 01       	movw	r26, r12
     fce:	3c 93       	st	X, r19
     fd0:	3e e4       	ldi	r19, 0x4E	; 78
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	3c 93       	st	X, r19
     fd6:	11 97       	sbiw	r26, 0x01	; 1
     fd8:	36 e4       	ldi	r19, 0x46	; 70
     fda:	12 96       	adiw	r26, 0x02	; 2
     fdc:	3c 93       	st	X, r19
     fde:	07 c0       	rjmp	.+14     	; 0xfee <dtoa_prf+0x142>
     fe0:	39 e6       	ldi	r19, 0x69	; 105
     fe2:	f6 01       	movw	r30, r12
     fe4:	30 83       	st	Z, r19
     fe6:	3e e6       	ldi	r19, 0x6E	; 110
     fe8:	31 83       	std	Z+1, r19	; 0x01
     fea:	36 e6       	ldi	r19, 0x66	; 102
     fec:	32 83       	std	Z+2, r19	; 0x02
     fee:	fc 01       	movw	r30, r24
     ff0:	32 2f       	mov	r19, r18
     ff2:	40 e2       	ldi	r20, 0x20	; 32
     ff4:	33 23       	and	r19, r19
     ff6:	19 f0       	breq	.+6      	; 0xffe <dtoa_prf+0x152>
     ff8:	41 93       	st	Z+, r20
     ffa:	31 50       	subi	r19, 0x01	; 1
     ffc:	fb cf       	rjmp	.-10     	; 0xff4 <dtoa_prf+0x148>
     ffe:	fc 01       	movw	r30, r24
    1000:	e2 0f       	add	r30, r18
    1002:	f1 1d       	adc	r31, r1
    1004:	10 82       	st	Z, r1
    1006:	8e ef       	ldi	r24, 0xFE	; 254
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	a6 c0       	rjmp	.+332    	; 0x1158 <dtoa_prf+0x2ac>
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	91 11       	cpse	r25, r1
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <dtoa_prf+0x16c>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	16 16       	cp	r1, r22
    101a:	17 06       	cpc	r1, r23
    101c:	1c f4       	brge	.+6      	; 0x1024 <dtoa_prf+0x178>
    101e:	fb 01       	movw	r30, r22
    1020:	31 96       	adiw	r30, 0x01	; 1
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <dtoa_prf+0x17c>
    1024:	e1 e0       	ldi	r30, 0x01	; 1
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	2e 0f       	add	r18, r30
    102a:	3f 1f       	adc	r19, r31
    102c:	bb 20       	and	r11, r11
    102e:	21 f0       	breq	.+8      	; 0x1038 <dtoa_prf+0x18c>
    1030:	eb 2d       	mov	r30, r11
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	02 c0       	rjmp	.+4      	; 0x103c <dtoa_prf+0x190>
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	2e 0f       	add	r18, r30
    103e:	3f 1f       	adc	r19, r31
    1040:	e1 2f       	mov	r30, r17
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	2e 17       	cp	r18, r30
    1046:	3f 07       	cpc	r19, r31
    1048:	1c f4       	brge	.+6      	; 0x1050 <dtoa_prf+0x1a4>
    104a:	12 1b       	sub	r17, r18
    104c:	21 2f       	mov	r18, r17
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <dtoa_prf+0x1a6>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	8e 2d       	mov	r24, r14
    1054:	88 71       	andi	r24, 0x18	; 24
    1056:	59 f4       	brne	.+22     	; 0x106e <dtoa_prf+0x1c2>
    1058:	f6 01       	movw	r30, r12
    105a:	82 2f       	mov	r24, r18
    105c:	30 e2       	ldi	r19, 0x20	; 32
    105e:	88 23       	and	r24, r24
    1060:	19 f0       	breq	.+6      	; 0x1068 <dtoa_prf+0x1bc>
    1062:	31 93       	st	Z+, r19
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	fb cf       	rjmp	.-10     	; 0x105e <dtoa_prf+0x1b2>
    1068:	c2 0e       	add	r12, r18
    106a:	d1 1c       	adc	r13, r1
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	99 23       	and	r25, r25
    1070:	29 f0       	breq	.+10     	; 0x107c <dtoa_prf+0x1d0>
    1072:	d6 01       	movw	r26, r12
    1074:	9c 93       	st	X, r25
    1076:	f6 01       	movw	r30, r12
    1078:	31 96       	adiw	r30, 0x01	; 1
    107a:	6f 01       	movw	r12, r30
    107c:	51 11       	cpse	r21, r1
    107e:	0b c0       	rjmp	.+22     	; 0x1096 <dtoa_prf+0x1ea>
    1080:	f6 01       	movw	r30, r12
    1082:	82 2f       	mov	r24, r18
    1084:	90 e3       	ldi	r25, 0x30	; 48
    1086:	88 23       	and	r24, r24
    1088:	19 f0       	breq	.+6      	; 0x1090 <dtoa_prf+0x1e4>
    108a:	91 93       	st	Z+, r25
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	fb cf       	rjmp	.-10     	; 0x1086 <dtoa_prf+0x1da>
    1090:	c2 0e       	add	r12, r18
    1092:	d1 1c       	adc	r13, r1
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	0f 2d       	mov	r16, r15
    1098:	06 0f       	add	r16, r22
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	34 2f       	mov	r19, r20
    109e:	30 71       	andi	r19, 0x10	; 16
    10a0:	44 ff       	sbrs	r20, 4
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <dtoa_prf+0x1fe>
    10a4:	91 33       	cpi	r25, 0x31	; 49
    10a6:	09 f4       	brne	.+2      	; 0x10aa <dtoa_prf+0x1fe>
    10a8:	01 50       	subi	r16, 0x01	; 1
    10aa:	10 16       	cp	r1, r16
    10ac:	24 f4       	brge	.+8      	; 0x10b6 <dtoa_prf+0x20a>
    10ae:	09 30       	cpi	r16, 0x09	; 9
    10b0:	18 f0       	brcs	.+6      	; 0x10b8 <dtoa_prf+0x20c>
    10b2:	08 e0       	ldi	r16, 0x08	; 8
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <dtoa_prf+0x20c>
    10b6:	01 e0       	ldi	r16, 0x01	; 1
    10b8:	ab 01       	movw	r20, r22
    10ba:	77 ff       	sbrs	r23, 7
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <dtoa_prf+0x216>
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	fb 01       	movw	r30, r22
    10c4:	e4 1b       	sub	r30, r20
    10c6:	f5 0b       	sbc	r31, r21
    10c8:	a1 e0       	ldi	r26, 0x01	; 1
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ac 0f       	add	r26, r28
    10ce:	bd 1f       	adc	r27, r29
    10d0:	ea 0f       	add	r30, r26
    10d2:	fb 1f       	adc	r31, r27
    10d4:	8e e2       	ldi	r24, 0x2E	; 46
    10d6:	a8 2e       	mov	r10, r24
    10d8:	4b 01       	movw	r8, r22
    10da:	80 1a       	sub	r8, r16
    10dc:	91 08       	sbc	r9, r1
    10de:	0b 2d       	mov	r16, r11
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	11 95       	neg	r17
    10e4:	01 95       	neg	r16
    10e6:	11 09       	sbc	r17, r1
    10e8:	4f 3f       	cpi	r20, 0xFF	; 255
    10ea:	bf ef       	ldi	r27, 0xFF	; 255
    10ec:	5b 07       	cpc	r21, r27
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <dtoa_prf+0x24c>
    10f0:	d6 01       	movw	r26, r12
    10f2:	ac 92       	st	X, r10
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	6d 01       	movw	r12, r26
    10f8:	64 17       	cp	r22, r20
    10fa:	75 07       	cpc	r23, r21
    10fc:	2c f0       	brlt	.+10     	; 0x1108 <dtoa_prf+0x25c>
    10fe:	84 16       	cp	r8, r20
    1100:	95 06       	cpc	r9, r21
    1102:	14 f4       	brge	.+4      	; 0x1108 <dtoa_prf+0x25c>
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	01 c0       	rjmp	.+2      	; 0x110a <dtoa_prf+0x25e>
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	41 50       	subi	r20, 0x01	; 1
    110c:	51 09       	sbc	r21, r1
    110e:	31 96       	adiw	r30, 0x01	; 1
    1110:	d6 01       	movw	r26, r12
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	7d 01       	movw	r14, r26
    1116:	40 17       	cp	r20, r16
    1118:	51 07       	cpc	r21, r17
    111a:	24 f0       	brlt	.+8      	; 0x1124 <dtoa_prf+0x278>
    111c:	d6 01       	movw	r26, r12
    111e:	8c 93       	st	X, r24
    1120:	67 01       	movw	r12, r14
    1122:	e2 cf       	rjmp	.-60     	; 0x10e8 <dtoa_prf+0x23c>
    1124:	64 17       	cp	r22, r20
    1126:	75 07       	cpc	r23, r21
    1128:	39 f4       	brne	.+14     	; 0x1138 <dtoa_prf+0x28c>
    112a:	96 33       	cpi	r25, 0x36	; 54
    112c:	20 f4       	brcc	.+8      	; 0x1136 <dtoa_prf+0x28a>
    112e:	95 33       	cpi	r25, 0x35	; 53
    1130:	19 f4       	brne	.+6      	; 0x1138 <dtoa_prf+0x28c>
    1132:	31 11       	cpse	r19, r1
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <dtoa_prf+0x28c>
    1136:	81 e3       	ldi	r24, 0x31	; 49
    1138:	f6 01       	movw	r30, r12
    113a:	80 83       	st	Z, r24
    113c:	f7 01       	movw	r30, r14
    113e:	82 2f       	mov	r24, r18
    1140:	90 e2       	ldi	r25, 0x20	; 32
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <dtoa_prf+0x2a0>
    1146:	91 93       	st	Z+, r25
    1148:	81 50       	subi	r24, 0x01	; 1
    114a:	fb cf       	rjmp	.-10     	; 0x1142 <dtoa_prf+0x296>
    114c:	f7 01       	movw	r30, r14
    114e:	e2 0f       	add	r30, r18
    1150:	f1 1d       	adc	r31, r1
    1152:	10 82       	st	Z, r1
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	29 96       	adiw	r28, 0x09	; 9
    115a:	ec e0       	ldi	r30, 0x0C	; 12
    115c:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__epilogue_restores__+0xc>

00001160 <__ftoa_engine>:
    1160:	28 30       	cpi	r18, 0x08	; 8
    1162:	08 f0       	brcs	.+2      	; 0x1166 <__ftoa_engine+0x6>
    1164:	27 e0       	ldi	r18, 0x07	; 7
    1166:	33 27       	eor	r19, r19
    1168:	da 01       	movw	r26, r20
    116a:	99 0f       	add	r25, r25
    116c:	31 1d       	adc	r19, r1
    116e:	87 fd       	sbrc	r24, 7
    1170:	91 60       	ori	r25, 0x01	; 1
    1172:	00 96       	adiw	r24, 0x00	; 0
    1174:	61 05       	cpc	r22, r1
    1176:	71 05       	cpc	r23, r1
    1178:	39 f4       	brne	.+14     	; 0x1188 <__ftoa_engine+0x28>
    117a:	32 60       	ori	r19, 0x02	; 2
    117c:	2e 5f       	subi	r18, 0xFE	; 254
    117e:	3d 93       	st	X+, r19
    1180:	30 e3       	ldi	r19, 0x30	; 48
    1182:	2a 95       	dec	r18
    1184:	e1 f7       	brne	.-8      	; 0x117e <__ftoa_engine+0x1e>
    1186:	08 95       	ret
    1188:	9f 3f       	cpi	r25, 0xFF	; 255
    118a:	30 f0       	brcs	.+12     	; 0x1198 <__ftoa_engine+0x38>
    118c:	80 38       	cpi	r24, 0x80	; 128
    118e:	71 05       	cpc	r23, r1
    1190:	61 05       	cpc	r22, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <__ftoa_engine+0x36>
    1194:	3c 5f       	subi	r19, 0xFC	; 252
    1196:	3c 5f       	subi	r19, 0xFC	; 252
    1198:	3d 93       	st	X+, r19
    119a:	91 30       	cpi	r25, 0x01	; 1
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__ftoa_engine+0x40>
    119e:	80 68       	ori	r24, 0x80	; 128
    11a0:	91 1d       	adc	r25, r1
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	1f 93       	push	r17
    11a8:	0f 93       	push	r16
    11aa:	ff 92       	push	r15
    11ac:	ef 92       	push	r14
    11ae:	19 2f       	mov	r17, r25
    11b0:	98 7f       	andi	r25, 0xF8	; 248
    11b2:	96 95       	lsr	r25
    11b4:	e9 2f       	mov	r30, r25
    11b6:	96 95       	lsr	r25
    11b8:	96 95       	lsr	r25
    11ba:	e9 0f       	add	r30, r25
    11bc:	ff 27       	eor	r31, r31
    11be:	e2 53       	subi	r30, 0x32	; 50
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	99 27       	eor	r25, r25
    11c4:	33 27       	eor	r19, r19
    11c6:	ee 24       	eor	r14, r14
    11c8:	ff 24       	eor	r15, r15
    11ca:	a7 01       	movw	r20, r14
    11cc:	e7 01       	movw	r28, r14
    11ce:	05 90       	lpm	r0, Z+
    11d0:	08 94       	sec
    11d2:	07 94       	ror	r0
    11d4:	28 f4       	brcc	.+10     	; 0x11e0 <__ftoa_engine+0x80>
    11d6:	36 0f       	add	r19, r22
    11d8:	e7 1e       	adc	r14, r23
    11da:	f8 1e       	adc	r15, r24
    11dc:	49 1f       	adc	r20, r25
    11de:	51 1d       	adc	r21, r1
    11e0:	66 0f       	add	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	06 94       	lsr	r0
    11ea:	a1 f7       	brne	.-24     	; 0x11d4 <__ftoa_engine+0x74>
    11ec:	05 90       	lpm	r0, Z+
    11ee:	07 94       	ror	r0
    11f0:	28 f4       	brcc	.+10     	; 0x11fc <__ftoa_engine+0x9c>
    11f2:	e7 0e       	add	r14, r23
    11f4:	f8 1e       	adc	r15, r24
    11f6:	49 1f       	adc	r20, r25
    11f8:	56 1f       	adc	r21, r22
    11fa:	c1 1d       	adc	r28, r1
    11fc:	77 0f       	add	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	66 1f       	adc	r22, r22
    1204:	06 94       	lsr	r0
    1206:	a1 f7       	brne	.-24     	; 0x11f0 <__ftoa_engine+0x90>
    1208:	05 90       	lpm	r0, Z+
    120a:	07 94       	ror	r0
    120c:	28 f4       	brcc	.+10     	; 0x1218 <__ftoa_engine+0xb8>
    120e:	f8 0e       	add	r15, r24
    1210:	49 1f       	adc	r20, r25
    1212:	56 1f       	adc	r21, r22
    1214:	c7 1f       	adc	r28, r23
    1216:	d1 1d       	adc	r29, r1
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	66 1f       	adc	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	06 94       	lsr	r0
    1222:	a1 f7       	brne	.-24     	; 0x120c <__ftoa_engine+0xac>
    1224:	05 90       	lpm	r0, Z+
    1226:	07 94       	ror	r0
    1228:	20 f4       	brcc	.+8      	; 0x1232 <__ftoa_engine+0xd2>
    122a:	49 0f       	add	r20, r25
    122c:	56 1f       	adc	r21, r22
    122e:	c7 1f       	adc	r28, r23
    1230:	d8 1f       	adc	r29, r24
    1232:	99 0f       	add	r25, r25
    1234:	66 1f       	adc	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	88 1f       	adc	r24, r24
    123a:	06 94       	lsr	r0
    123c:	a9 f7       	brne	.-22     	; 0x1228 <__ftoa_engine+0xc8>
    123e:	84 91       	lpm	r24, Z
    1240:	10 95       	com	r17
    1242:	17 70       	andi	r17, 0x07	; 7
    1244:	41 f0       	breq	.+16     	; 0x1256 <__ftoa_engine+0xf6>
    1246:	d6 95       	lsr	r29
    1248:	c7 95       	ror	r28
    124a:	57 95       	ror	r21
    124c:	47 95       	ror	r20
    124e:	f7 94       	ror	r15
    1250:	e7 94       	ror	r14
    1252:	1a 95       	dec	r17
    1254:	c1 f7       	brne	.-16     	; 0x1246 <__ftoa_engine+0xe6>
    1256:	e4 e7       	ldi	r30, 0x74	; 116
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	68 94       	set
    125c:	15 90       	lpm	r1, Z+
    125e:	15 91       	lpm	r17, Z+
    1260:	35 91       	lpm	r19, Z+
    1262:	65 91       	lpm	r22, Z+
    1264:	95 91       	lpm	r25, Z+
    1266:	05 90       	lpm	r0, Z+
    1268:	7f e2       	ldi	r23, 0x2F	; 47
    126a:	73 95       	inc	r23
    126c:	e1 18       	sub	r14, r1
    126e:	f1 0a       	sbc	r15, r17
    1270:	43 0b       	sbc	r20, r19
    1272:	56 0b       	sbc	r21, r22
    1274:	c9 0b       	sbc	r28, r25
    1276:	d0 09       	sbc	r29, r0
    1278:	c0 f7       	brcc	.-16     	; 0x126a <__ftoa_engine+0x10a>
    127a:	e1 0c       	add	r14, r1
    127c:	f1 1e       	adc	r15, r17
    127e:	43 1f       	adc	r20, r19
    1280:	56 1f       	adc	r21, r22
    1282:	c9 1f       	adc	r28, r25
    1284:	d0 1d       	adc	r29, r0
    1286:	7e f4       	brtc	.+30     	; 0x12a6 <__ftoa_engine+0x146>
    1288:	70 33       	cpi	r23, 0x30	; 48
    128a:	11 f4       	brne	.+4      	; 0x1290 <__ftoa_engine+0x130>
    128c:	8a 95       	dec	r24
    128e:	e6 cf       	rjmp	.-52     	; 0x125c <__ftoa_engine+0xfc>
    1290:	e8 94       	clt
    1292:	01 50       	subi	r16, 0x01	; 1
    1294:	30 f0       	brcs	.+12     	; 0x12a2 <__ftoa_engine+0x142>
    1296:	08 0f       	add	r16, r24
    1298:	0a f4       	brpl	.+2      	; 0x129c <__ftoa_engine+0x13c>
    129a:	00 27       	eor	r16, r16
    129c:	02 17       	cp	r16, r18
    129e:	08 f4       	brcc	.+2      	; 0x12a2 <__ftoa_engine+0x142>
    12a0:	20 2f       	mov	r18, r16
    12a2:	23 95       	inc	r18
    12a4:	02 2f       	mov	r16, r18
    12a6:	7a 33       	cpi	r23, 0x3A	; 58
    12a8:	28 f0       	brcs	.+10     	; 0x12b4 <__ftoa_engine+0x154>
    12aa:	79 e3       	ldi	r23, 0x39	; 57
    12ac:	7d 93       	st	X+, r23
    12ae:	2a 95       	dec	r18
    12b0:	e9 f7       	brne	.-6      	; 0x12ac <__ftoa_engine+0x14c>
    12b2:	10 c0       	rjmp	.+32     	; 0x12d4 <__ftoa_engine+0x174>
    12b4:	7d 93       	st	X+, r23
    12b6:	2a 95       	dec	r18
    12b8:	89 f6       	brne	.-94     	; 0x125c <__ftoa_engine+0xfc>
    12ba:	06 94       	lsr	r0
    12bc:	97 95       	ror	r25
    12be:	67 95       	ror	r22
    12c0:	37 95       	ror	r19
    12c2:	17 95       	ror	r17
    12c4:	17 94       	ror	r1
    12c6:	e1 18       	sub	r14, r1
    12c8:	f1 0a       	sbc	r15, r17
    12ca:	43 0b       	sbc	r20, r19
    12cc:	56 0b       	sbc	r21, r22
    12ce:	c9 0b       	sbc	r28, r25
    12d0:	d0 09       	sbc	r29, r0
    12d2:	98 f0       	brcs	.+38     	; 0x12fa <__ftoa_engine+0x19a>
    12d4:	23 95       	inc	r18
    12d6:	7e 91       	ld	r23, -X
    12d8:	73 95       	inc	r23
    12da:	7a 33       	cpi	r23, 0x3A	; 58
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <__ftoa_engine+0x180>
    12de:	70 e3       	ldi	r23, 0x30	; 48
    12e0:	7c 93       	st	X, r23
    12e2:	20 13       	cpse	r18, r16
    12e4:	b8 f7       	brcc	.-18     	; 0x12d4 <__ftoa_engine+0x174>
    12e6:	7e 91       	ld	r23, -X
    12e8:	70 61       	ori	r23, 0x10	; 16
    12ea:	7d 93       	st	X+, r23
    12ec:	30 f0       	brcs	.+12     	; 0x12fa <__ftoa_engine+0x19a>
    12ee:	83 95       	inc	r24
    12f0:	71 e3       	ldi	r23, 0x31	; 49
    12f2:	7d 93       	st	X+, r23
    12f4:	70 e3       	ldi	r23, 0x30	; 48
    12f6:	2a 95       	dec	r18
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <__ftoa_engine+0x192>
    12fa:	11 24       	eor	r1, r1
    12fc:	ef 90       	pop	r14
    12fe:	ff 90       	pop	r15
    1300:	0f 91       	pop	r16
    1302:	1f 91       	pop	r17
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	99 27       	eor	r25, r25
    130a:	87 fd       	sbrc	r24, 7
    130c:	90 95       	com	r25
    130e:	08 95       	ret

00001310 <strrev>:
    1310:	dc 01       	movw	r26, r24
    1312:	fc 01       	movw	r30, r24
    1314:	67 2f       	mov	r22, r23
    1316:	71 91       	ld	r23, Z+
    1318:	77 23       	and	r23, r23
    131a:	e1 f7       	brne	.-8      	; 0x1314 <strrev+0x4>
    131c:	32 97       	sbiw	r30, 0x02	; 2
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <strrev+0x18>
    1320:	7c 91       	ld	r23, X
    1322:	6d 93       	st	X+, r22
    1324:	70 83       	st	Z, r23
    1326:	62 91       	ld	r22, -Z
    1328:	ae 17       	cp	r26, r30
    132a:	bf 07       	cpc	r27, r31
    132c:	c8 f3       	brcs	.-14     	; 0x1320 <strrev+0x10>
    132e:	08 95       	ret

00001330 <__prologue_saves__>:
    1330:	2f 92       	push	r2
    1332:	3f 92       	push	r3
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	ca 1b       	sub	r28, r26
    135a:	db 0b       	sbc	r29, r27
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	09 94       	ijmp

00001368 <__epilogue_restores__>:
    1368:	2a 88       	ldd	r2, Y+18	; 0x12
    136a:	39 88       	ldd	r3, Y+17	; 0x11
    136c:	48 88       	ldd	r4, Y+16	; 0x10
    136e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1370:	6e 84       	ldd	r6, Y+14	; 0x0e
    1372:	7d 84       	ldd	r7, Y+13	; 0x0d
    1374:	8c 84       	ldd	r8, Y+12	; 0x0c
    1376:	9b 84       	ldd	r9, Y+11	; 0x0b
    1378:	aa 84       	ldd	r10, Y+10	; 0x0a
    137a:	b9 84       	ldd	r11, Y+9	; 0x09
    137c:	c8 84       	ldd	r12, Y+8	; 0x08
    137e:	df 80       	ldd	r13, Y+7	; 0x07
    1380:	ee 80       	ldd	r14, Y+6	; 0x06
    1382:	fd 80       	ldd	r15, Y+5	; 0x05
    1384:	0c 81       	ldd	r16, Y+4	; 0x04
    1386:	1b 81       	ldd	r17, Y+3	; 0x03
    1388:	aa 81       	ldd	r26, Y+2	; 0x02
    138a:	b9 81       	ldd	r27, Y+1	; 0x01
    138c:	ce 0f       	add	r28, r30
    138e:	d1 1d       	adc	r29, r1
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	ed 01       	movw	r28, r26
    139c:	08 95       	ret

0000139e <_exit>:
    139e:	f8 94       	cli

000013a0 <__stop_program>:
    13a0:	ff cf       	rjmp	.-2      	; 0x13a0 <__stop_program>
